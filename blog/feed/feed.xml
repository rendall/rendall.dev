<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Rendall&#39;s blog</title>
	<subtitle>Sketches, thoughts, and observations on all the things. A personal notebook.</subtitle>
	<link href="https://blog.rendall.dev/feed/feed.xml" rel="self"/>
	<link href="https://blog.rendall.dev"/>
	<updated>2021-03-15T00:00:00Z</updated>
	<id>https://blog.rendall.tv/</id>
	<author>
		<name>Rendall Koski</name>
		<email>rendall@gmail.com</email>
	</author>
	
	<entry>
		<title>Introduction</title>
		<link href="https://blog.rendall.dev/posts/2018/12/20/introduction/"/>
		<updated>2018-12-20T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2018/12/20/introduction/</id>
		<content type="html">&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;My name is Rendall. I am a software developer, father and New York City expatriot living in Finland, so this blog will revolve around these topics. This is a quick introductory post to say hello and set intentions for the blog.&lt;/p&gt;
&lt;p&gt;The first intention is to free my thoughts to the bright light of extrospection, to let myself and others see what has accreted there. Whether interesting, boring, odd, illuminating, useful, insightful, or trite: all will be revealed.&lt;/p&gt;
&lt;p&gt;The second is to commit to committing; never to stealth edit a post, but clearly denote any changes; to be upfront about previous and ongoing mistakes, unwarranted convictions, blunders, misapprehensions and peculiar notions.&lt;/p&gt;
&lt;p&gt;The third is to write more.&lt;/p&gt;
&lt;p&gt;This blog is a bit of a continuation of &lt;a href=&quot;https://rendallkoski.blogspot.com/&quot;&gt;another&lt;/a&gt;, but since I am taking ownership of the hosting, coding and designing of this one, it feels like a clean break and true start.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Database vocabulary: ACID</title>
		<link href="https://blog.rendall.dev/posts/2018/12/21/database-vocabulary-acid/"/>
		<updated>2018-12-21T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2018/12/21/database-vocabulary-acid/</id>
		<content type="html">&lt;p&gt;Databases are often described in terms of their ACID properties (e.g. &amp;quot;eventual consistency&amp;quot;), so knowing the vocabulary is useful when considering a database solution. Some contemporary database management systems intentionally disregard ACID properties in a tradeoff for other gains.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;ACID&lt;/strong&gt;&lt;/em&gt; is an acronym representing four traits of a database transaction that will guarantee valid data even if the transaction is not completed. Transactions that violate these principles will leave the database in an unknown or invalid state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: a transaction must either complete all operations of the transaction or no operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: a transaction that completes must conform to all and any constraints on the data.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;eventual consistency&lt;/em&gt;: in a distributed database, a change to the data in one instance will take time to propogate to other instances. Eventual consistency means that this change will eventually propogate (&amp;quot;converge&amp;quot;), and all relational constraints and rules will be applied; but before then, anything goes: old, invalid date might be retrieved instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: a transaction&#39;s operations must not influence (be visible to) other transactions until the transaction is complete. Rather, transactions executed at the same time must behave as if they were executed one at a time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: the changes made by a completed transaction must be permanent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The influential paper describing these properties is &lt;a href=&quot;https://web.archive.org/web/20170810141540/https://web.stanford.edu/class/cs340v/papers/recovery.pdf&quot;&gt;&amp;quot;Principles of Transaction-Oriented Database Recovery&amp;quot;&lt;/a&gt; by Haerder and Reuter, 1983.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Happy Holidays</title>
		<link href="https://blog.rendall.dev/posts/2018/12/25/happy-holidays/"/>
		<updated>2018-12-25T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2018/12/25/happy-holidays/</id>
		<content type="html">&lt;p&gt;Happy Holidays, everyone. I just launched this blog right into the holiday season, and so start with a gap! I hope your holidays are going well.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Problem: Typescript adds Object.defineProperty(exports, &quot;__esModule&quot;, { value: true });</title>
		<link href="https://blog.rendall.dev/posts/2019/1/14/problem-typescript-adds-objectdefinepropertyexports-esmodule-value-true/"/>
		<updated>2019-01-14T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2019/1/14/problem-typescript-adds-objectdefinepropertyexports-esmodule-value-true/</id>
		<content type="html">&lt;p&gt;You&#39;re using Typescript in a frontend project, and import a module into your code. Something like:&lt;br /&gt;
&lt;code&gt;import { Observable } from &#39;rxjs&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You&#39;re using a bundler like &lt;a href=&quot;https://webpack.js.org/&quot;&gt;&lt;em&gt;Webpack&lt;/em&gt;&lt;/a&gt; that squeezes those modules into a single minimized javascript file, so you want to keep that line as-is.&lt;/p&gt;
&lt;p&gt;However, when Typescript compiles into javascript, it adds the line &lt;code&gt;Object.defineProperty(exports, &amp;quot;__esModule&amp;quot;, { value: true });&lt;/code&gt; which causes an error &lt;code&gt;Uncaught ReferenceError: exports is not defined&lt;/code&gt; or something similar in your browser&#39;s console.&lt;/p&gt;
&lt;p&gt;You search for solutions, but everyone is talking about using &lt;a href=&quot;https://requirejs.org/&quot;&gt;&lt;em&gt;RequireJS&lt;/em&gt;&lt;/a&gt; like it&#39;s 2014!&lt;/p&gt;
&lt;p&gt;You want to get rid of this unwanted &lt;code&gt;Object.defineProperty&lt;/code&gt; line but leave the rest of your code untouched.&lt;/p&gt;
&lt;p&gt;Solution: Modify these two lines in your &lt;code&gt;tsconfig.json&lt;/code&gt; to the following:&lt;br /&gt;
&lt;code&gt;&amp;quot;module&amp;quot;: &amp;quot;es6&amp;quot;,&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;quot;lib&amp;quot;: [&amp;quot;dom&amp;quot;,&amp;quot;es6&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;commonjs&lt;/code&gt; (the current Typescript default) or one of the other suggested options assumes you are writing a &lt;code&gt;Node.js&lt;/code&gt; application, or&lt;/li&gt;
&lt;li&gt;that you will use a module loader (like &lt;em&gt;RequireJS&lt;/em&gt;) which loads files into your web application at runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es6&lt;/code&gt; is a working standard that will keep your &lt;code&gt;import&lt;/code&gt; line intact.&lt;/li&gt;
&lt;li&gt;But &lt;code&gt;es6&lt;/code&gt; assumes you are importing from a javascript file (e.g. &lt;code&gt;import { this } from &#39;./that.js&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;However, you are using a package manager, you hipster, and that module is not in an external javascript file, but is sitting in a &lt;code&gt;node_modules&lt;/code&gt; directory somewhere waiting for your package bundler to roll it on up.&lt;/li&gt;
&lt;li&gt;Typescript sees the &lt;code&gt;es6&lt;/code&gt; module style, but not the &lt;code&gt;es6&lt;/code&gt; lib, and so believes you are loading an external javascript file. This is why you need to add the &lt;code&gt;es6&lt;/code&gt; to &lt;code&gt;lib:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;But once you enable &lt;code&gt;lib:&lt;/code&gt;, the browser-specific code in your typescript will break without the &lt;code&gt;dom&lt;/code&gt; library, so you need to add that, too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step-by-step: Still need help? Follow these instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;If you do not have a &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/em&gt; In your project directory, type &lt;code&gt;tsc --init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;tsconfig.json&lt;/code&gt; file, find the line starting &lt;code&gt;module:&lt;/code&gt; and change its value to &lt;code&gt;es6&lt;/code&gt; like so: &lt;code&gt;&amp;quot;module&amp;quot;: &amp;quot;es6&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Further down, find the line starting &lt;code&gt;lib:&lt;/code&gt; and add &lt;code&gt;dom&lt;/code&gt; and &lt;code&gt;es6&lt;/code&gt; to the array, like so: &lt;code&gt;&amp;quot;lib&amp;quot;: [&amp;quot;dom&amp;quot;,&amp;quot;es6&amp;quot;]&lt;/code&gt;. Make sure to uncomment it if necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://json.schemastore.org/tsconfig&quot;&gt;The &lt;code&gt;tsconfig.json&lt;/code&gt; schema&lt;/a&gt; contains all of the options for every key-value pair, including:&lt;/li&gt;
&lt;li&gt;Current &lt;code&gt;module&lt;/code&gt; options (one of): &lt;code&gt;&amp;quot;commonjs&amp;quot;, &amp;quot;amd&amp;quot;, &amp;quot;umd&amp;quot;, &amp;quot;system&amp;quot;, &amp;quot;es6&amp;quot;, &amp;quot;es2015&amp;quot;, &amp;quot;esnext&amp;quot;,&lt;/code&gt; or &lt;code&gt;&amp;quot;none&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Current &lt;code&gt;lib&lt;/code&gt; options (any combination of): &lt;code&gt;&amp;quot;es5&amp;quot;, &amp;quot;es6&amp;quot;, &amp;quot;es2015&amp;quot;, &amp;quot;es7&amp;quot;, &amp;quot;es2016&amp;quot;, &amp;quot;es2017&amp;quot;, &amp;quot;es2018&amp;quot;, &amp;quot;esnext&amp;quot;, &amp;quot;dom&amp;quot;, &amp;quot;dom.iterable&amp;quot;, &amp;quot;webworker&amp;quot;, &amp;quot;scripthost&amp;quot;, &amp;quot;es2015.core&amp;quot;, &amp;quot;es2015.collection&amp;quot;, &amp;quot;es2015.generator&amp;quot;, &amp;quot;es2015.iterable&amp;quot;, &amp;quot;es2015.promise&amp;quot;, &amp;quot;es2015.proxy&amp;quot;, &amp;quot;es2015.reflect&amp;quot;, &amp;quot;es2015.symbol&amp;quot;, &amp;quot;es2015.symbol.wellknown&amp;quot;, &amp;quot;es2016.array.include&amp;quot;, &amp;quot;es2017.object&amp;quot;, &amp;quot;es2017.intl&amp;quot;, &amp;quot;es2017.sharedmemory&amp;quot;, &amp;quot;es2017.string&amp;quot;, &amp;quot;es2017.typedarrays&amp;quot;, &amp;quot;es2018.intl&amp;quot;, &amp;quot;es2018.promise&amp;quot;, &amp;quot;es2018.regexp&amp;quot;, &amp;quot;esnext.asynciterable&amp;quot;, &amp;quot;esnext.array&amp;quot;, &amp;quot;esnext.intl&amp;quot;, &amp;quot;esnext.symbol&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Class notes: Mastering Git</title>
		<link href="https://blog.rendall.dev/posts/2019/1/26/class-notes-mastering-git/"/>
		<updated>2019-01-26T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2019/1/26/class-notes-mastering-git/</id>
		<content type="html">&lt;p&gt;These are my class notes to &lt;a href=&quot;https://twitter.com/nusco&quot;&gt;Paolo Perrotta&lt;/a&gt;&#39;s excellent and entertaining video course &lt;em&gt;&lt;a href=&quot;https://app.pluralsight.com/library/courses/mastering-git&quot;&gt;Mastering Git&lt;/a&gt;&lt;/em&gt;, comprising 8 videos of 2 hours 45 minutes total. I recently took up the &lt;a href=&quot;https://developer.microsoft.com/en-us/collective&quot;&gt;Microsoft Dev Collective&lt;/a&gt;&#39;s offer for a 30-day free trial of &lt;a href=&quot;https://www.pluralsight.com/&quot;&gt;Pluralsight&lt;/a&gt; and this was one of several that I enjoyed. I highly recommend this course if you are familiar with git, but even a little unclear on how git works. Especially if, like me, you use the same git commands every day with only a vague notion of what they do. Signore Perrotta explains everything brilliantly.&lt;/p&gt;
&lt;p&gt;git tracks changes in 4 places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;working directory&lt;/em&gt; - this is the project directory in the OS file structure&lt;/li&gt;
&lt;li&gt;&lt;em&gt;index&lt;/em&gt; - a.k.a the staging area&lt;/li&gt;
&lt;li&gt;&lt;em&gt;repository&lt;/em&gt; - in the &lt;code&gt;.git&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;&lt;em&gt;stash&lt;/em&gt; - a kind of scratch pad or clipboard for the developer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2 questions which will completely define and explain any command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How does this command move information across the 4 areas?&lt;/li&gt;
&lt;li&gt;How does this command change the repository?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some useful git log commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log --graph --decorate --oneline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --patch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -- &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Distributed Workflow patterns. This is the social side of git: how git users on a team use it. These are useful terms for fruitful discussion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribution models: how sourcecode is shared among repositories
&lt;ul&gt;
&lt;li&gt;Peer-to-peer: developers pulling from each other&#39;s repositories&lt;/li&gt;
&lt;li&gt;Centralized: one repository holds the canonical version&lt;/li&gt;
&lt;li&gt;Pull-request model: devs do not push directly, but request&lt;/li&gt;
&lt;li&gt;hierarchical model: some devs are gatekeepers to canonical repositories&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Branching models: how branches are used
&lt;ul&gt;
&lt;li&gt;Stable versus unstable (does a branch allow broken code?)&lt;/li&gt;
&lt;li&gt;Integration (is there a &amp;quot;master&amp;quot; branch to which all repos merge/rebase?)&lt;/li&gt;
&lt;li&gt;Release branch&lt;/li&gt;
&lt;li&gt;Feature branch&lt;/li&gt;
&lt;li&gt;Hotfix branch (versus cherry-pick, which is a rebase)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constraints: allowed, disallowed and preferred methods
&lt;ul&gt;
&lt;li&gt;Merge versus rebase (messy truth versus clean inaccuracy)&lt;/li&gt;
&lt;li&gt;Gatekeeping and responsibility (do some devs have privs)&lt;/li&gt;
&lt;li&gt;&amp;quot;Don&#39;t push when the build is broken&amp;quot; (CI error)&lt;/li&gt;
&lt;li&gt;clean history before push to integration?&lt;/li&gt;
&lt;li&gt;Every pull request linked to an issue/ticket number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gitflow: such an &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;influential model&lt;/a&gt; deserves separate discussion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#39;t &amp;quot;just use Gitflow&amp;quot;. It is not optimal for every project, e.g.:
&lt;ul&gt;
&lt;li&gt;web apps that need to maintain only one release branch&lt;/li&gt;
&lt;li&gt;project with continuous integration in which features released immediately, Gitflow has too many layers&lt;/li&gt;
&lt;li&gt;projects with long term feature development
&lt;ul&gt;
&lt;li&gt;large code bases touching everywhere could cause integration headaches&lt;/li&gt;
&lt;li&gt;perhaps better to integrate often, even when features are not yet complete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Growing a workflow: Avoid designing a complete workflow from the beginning, but start small and grow it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sample starter workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribution model: Centralized&lt;/li&gt;
&lt;li&gt;Branching model:
&lt;ul&gt;
&lt;li&gt;One integration branch (master)&lt;/li&gt;
&lt;li&gt;One feature branch per feature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constraints:
&lt;ul&gt;
&lt;li&gt;Keep master stable, fix ASAP if it breaks&lt;/li&gt;
&lt;li&gt;Integrate feature branches every few days&lt;/li&gt;
&lt;li&gt;User merge over rebase by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;Simple, clear purpose and principles give rise to complex intelligent behavior. Complex rules and regulations give rise to simple stupid behavior.&amp;quot;&lt;/p&gt;
&lt;p&gt;-- Dee Hock&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personal thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Other constraints I have seen:&lt;/li&gt;
&lt;li&gt;Merge feature branches into the master branch, but clean up with interactive rebase the history of the branch before doing so.&lt;/li&gt;
&lt;li&gt;Do not rebase the history of the master branch.&lt;/li&gt;
&lt;li&gt;Features that are not released yet should be hidden by default, to be turned on with an internal flag&lt;/li&gt;
&lt;li&gt;Branches should have an associated issue number, and commit messages should reference that number (required a githook to enforce)&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Class notes: Build Your Own RxJS Pipeable Operators</title>
		<link href="https://blog.rendall.dev/posts/2019/1/27/class-notes-build-your-own-rxjs-pipeable-operators/"/>
		<updated>2019-01-27T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2019/1/27/class-notes-build-your-own-rxjs-pipeable-operators/</id>
		<content type="html">&lt;p&gt;I took &lt;a href=&quot;https://egghead.io/instructors/john-lindquist&quot;&gt;John Lindquist&lt;/a&gt;&#39;s online video course &lt;a href=&quot;https://egghead.io/courses/build-your-own-rxjs-pipeable-operators&quot;&gt;Build Your Own RxJS Pipeable Operators&lt;/a&gt; which comprises 12 videos in 31 minutes total. Yep, that is fast! While I can recommend the course if you&#39;re interested in RxJS 6, you do need some experience with RxJS, and Lindquist is super speedy necessitating frequent pauses.&lt;/p&gt;
&lt;p&gt;The course covers what it says right on the tin: how to construct your own RxJS pipe operators, which I found useful for both getting a grasp on RxJS and for writing more expressively in RxJS. These are the class notes. The meat of this post and that course is in these pieces of (Typescript) code:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;makeRxJSOperator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Observable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// This function makeRxJSOperator is my own twist on the instructor&#39;s main trick, which is to use&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// `lift` to subscribe an instance of a Subscriber class to the source Observable&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; yourNewPipeOperator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SubscriberClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// yourNewPipeOperator is now a function which takes an Observable and returns another Observable&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// which you can use like this:&lt;/span&gt;&lt;br /&gt;inputStream$&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yourNewPipeOperator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; anotherPipeOperator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dataresult:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SubscriberClass&lt;/code&gt; looks like this (fill in your blanks):&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SubscriberClass&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subscriber&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;Subscriber&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// this.destination.next(someVal) is how a value is passed to the next pipe operator&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// it does not necessarily need to be in _next. It could, for example, be in&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// the end of an asynch callback or Promise chain&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// &#39;modify&#39; here represents some hypothetical modification to &#39;value&#39;, if any&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;_complete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;_error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;Error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lindquist uses this construction to reproduce several of the canonical operators, &lt;code&gt;mergeMap&lt;/code&gt;, &lt;code&gt;switchMap&lt;/code&gt; and &lt;code&gt;concatMap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Practically, it can be used like this:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; audioPlayerHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AudioPlayer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; recorderHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Recorder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blobToBase64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BlobToBase64&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; speechToTextHander &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SpeechToText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// which are components of this interaction chain, rather like a Promise chain:&lt;/span&gt;&lt;br /&gt;buttonClick$&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    audioRecordHandler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    audioPlayerHandler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    blobToBase64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    speechToTextHander&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dataresult:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have actually written the line above, with the &lt;code&gt;Recorder&lt;/code&gt; Subscriber class reproduced here for example:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This class accepts the state of a &#39;record&#39; button&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// through its _next method&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and then causes side effects depending on the toggle state&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Recorder&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subscriber&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; _stream&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MediaStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; _recorder&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MediaRecorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaRecorder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Subscriber&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buttonState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buttonState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;RECORD&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;STOP&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onDataAvailable&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; BlobEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blob &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Blob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;audio/ogg;codecs=opus&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;blob&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// If the user wants to &#39;RECORD&#39;, the microphone is accessed and begins&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// recording audio. A new &#39;MediaRecorder&#39; instance is created and a&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// handler attached to its &#39;onDataAvailable&#39; event&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaDevices&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserMedia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; audio&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaRecorder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_stream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            audioBitsPerSecond&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dataavailable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onDataAvailable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token string&quot;&gt;&quot;mime:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mimeType&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audioBitsPerSecond&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// When the user presses &#39;STOP&#39;, the microphone is turned off and, through&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// event handling (qv. onDataHandling), the raw audio data is passed&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// to the next observer in the chain.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A lot of state is encapsulated and disposed of within this class. It is difficult to even imagine how one would accomplish this using the provided RxJS operators. For instance, the line &lt;code&gt;navigator.mediaDevices.getUserMedia&lt;/code&gt; should never be called except through user interaction, otherwise the user sees an annoying popup immediately after landing on the page itself. Without a laborious workaround, this line will be called immediately when &lt;code&gt;.subscribe&lt;/code&gt; is called on the entire chain.&lt;/p&gt;
&lt;p&gt;But, all that said, I am still much of a newbie when it comes to RxJS, and so, perhaps, I would find all of this baroque or unnecessary were I more of an expert. I absolutely welcome instruction, if you know a better way.&lt;/p&gt;
&lt;p&gt;Also, as an aside, Lindquist uses &lt;a href=&quot;https://quokkajs.com/&quot;&gt;Quokka&lt;/a&gt; to show immediate feedback from his code changes, which is rather nifty.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to webfont</title>
		<link href="https://blog.rendall.dev/posts/2019/1/30/how-to-webfont/"/>
		<updated>2019-01-30T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2019/1/30/how-to-webfont/</id>
		<content type="html">&lt;p&gt;This is a quick guide to get a webfont into your website with some attention to web performance and is intended as a starting point for small sites that will write in a Latin alphabet. At the end of the post are some resources for further optimizations, if you choose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, get your font. This site uses &lt;a href=&quot;https://fonts.google.com/specimen/Montserrat&quot;&gt;&lt;em&gt;Montserrat&lt;/em&gt;&lt;/a&gt; but there are lots of other groovy options over at &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google fonts&lt;/a&gt;. There are other nifty sites for free fonts, too. If this is your site&#39;s text font, grab the files that represent the &lt;em&gt;regular&lt;/em&gt;, &lt;em&gt;italic&lt;/em&gt;, &lt;em&gt;bold&lt;/em&gt; and &lt;em&gt;bold italic&lt;/em&gt; versions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, download the font files and host them yourself. &lt;strong&gt;Do not&lt;/strong&gt; just throw the link into your html &lt;code&gt;head&lt;/code&gt; tag like this &lt;code&gt;&amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css?family=Open+Sans&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/code&gt;. Among many reasons for not doing this, you would badly slow down your site&#39;s load time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, &lt;em&gt;optimize&lt;/em&gt; your font! &lt;a href=&quot;https://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel&lt;/a&gt; is good enough and has a good reputation, but there are other online optimizine services and programs. Your font likely has glyphs and such that you will &lt;em&gt;never&lt;/em&gt; use! Get those out of there!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upload all of the font files you downloaded in the second step to &lt;a href=&quot;https://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select all of the font formats except &lt;code&gt;EOT lite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If your font files are TrueType, select &lt;code&gt;TrueType hinting: Keep Existing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;Spaces&lt;/code&gt; and &lt;code&gt;Hyphens&lt;/code&gt; in &lt;code&gt;Fix Missing Glyphs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you have a fallback font, and you do, pick it in &lt;code&gt;X-height Matching&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;Subsetting&lt;/code&gt; choose &lt;code&gt;custom&lt;/code&gt;. This is where you toss most of your font file size.
&lt;ul&gt;
&lt;li&gt;Important: deselect as much as you can. Start with nothing selected.&lt;/li&gt;
&lt;li&gt;If this is a display font for just the header or logotype
&lt;ul&gt;
&lt;li&gt;Under &lt;code&gt;Single Characters&lt;/code&gt; add only those characters you will use&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If this is your website&#39;s text font, select these:
&lt;ul&gt;
&lt;li&gt;Lowercase&lt;/li&gt;
&lt;li&gt;Uppercase&lt;/li&gt;
&lt;li&gt;Numbers&lt;/li&gt;
&lt;li&gt;Punctuation&lt;/li&gt;
&lt;li&gt;(maybe) Currency&lt;/li&gt;
&lt;li&gt;Look at &lt;code&gt;Subset Preview&lt;/code&gt; to make sure that you have all the glyphs you will need&lt;/li&gt;
&lt;li&gt;Add anything missing in &lt;code&gt;Single Characters&lt;/code&gt;, e.g: &lt;code&gt;ÄÖÅäöåé&lt;/code&gt; (for this site)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enter a memorable name under &lt;code&gt;CSS: CSS Filename&lt;/code&gt;, e.g. &lt;code&gt;fonts.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;Agreement&lt;/code&gt; assuming your fonts are legal (and they are, if you got them from the Google site)&lt;/li&gt;
&lt;li&gt;Then &lt;code&gt;Download your kit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Fourth&lt;/strong&gt;, unzip and open up your css file (e.g. &lt;code&gt;fonts.css&lt;/code&gt;). There are a few modifications you will need to make, here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change all of the &lt;code&gt;font-family&lt;/code&gt; values to the same value.
&lt;ul&gt;
&lt;li&gt;(e.g. Change &lt;code&gt;font-family: &#39;montserratbold&#39;&lt;/code&gt; to &lt;code&gt;font-family: &#39;Montserrat&#39;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Under each &lt;code&gt;@font-face&lt;/code&gt; declaration change &lt;code&gt;font-weight&lt;/code&gt; and &lt;code&gt;font-style&lt;/code&gt; as appropriate
&lt;ul&gt;
&lt;li&gt;For the &lt;em&gt;bold&lt;/em&gt; version of your font, change &lt;code&gt;font-weight&lt;/code&gt; to &lt;code&gt;bold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For the &lt;em&gt;italic&lt;/em&gt; version of your font, change &lt;code&gt;font-style&lt;/code&gt; to &lt;code&gt;italic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For the &lt;em&gt;italic&lt;/em&gt; and &lt;em&gt;bold&lt;/em&gt; version of your font, change them both&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Change every &lt;code&gt;url&lt;/code&gt; value to be relative to the &lt;code&gt;css&lt;/code&gt; file
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;url(&#39;../fonts/montserrat-bold.eot&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Inside of each &lt;code&gt;@font-face&lt;/code&gt; declaration, add either line: &lt;code&gt;font-display: swap;&lt;/code&gt; or &lt;code&gt;font-display: optional;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Or not. Read more about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display&quot;&gt;&lt;code&gt;font-display&lt;/code&gt; here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Fifth&lt;/strong&gt;, paste the &lt;code&gt;@font-face&lt;/code&gt; declarations into your site&#39;s stylesheet, and move the fonts into your project directory structure. Again, make sure that the paths in the &lt;code&gt;url&lt;/code&gt; are relative to the &lt;code&gt;css&lt;/code&gt; file that contains the &lt;code&gt;@font-face&lt;/code&gt; declarations, and &lt;em&gt;not&lt;/em&gt;, for example, to the webpage that links to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sixth&lt;/strong&gt;, wire up your &lt;code&gt;html&lt;/code&gt; tags to the font files, using the name you chose for them in the fourth step. e.g. &lt;code&gt;html { font-family: &amp;quot;Montserrat&amp;quot;, Arial, Helvetica, sans-serif;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Troubleshooting: fire up your browser and see if the fonts are being loaded. If not, the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/&quot;&gt;developer console&lt;/a&gt; should tell you whence it seeks them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, you have definitely degraded the load time and performance of your site. You have to decide whether it&#39;s &lt;em&gt;good enough&lt;/em&gt; or if you need further optimizations.&lt;/p&gt;
&lt;p&gt;Here are some relatively recent (as of writing) articles about the topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/font-checklist/&quot;&gt;https://www.zachleat.com/web/font-checklist/&lt;/a&gt; (Zach Leatherman has done a lot of work in the space of optimizing webfont loading.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frontendnews.io/editions/2018-07-25-tips-for-loading-web-fonts&quot;&gt;https://frontendnews.io/editions/2018-07-25-tips-for-loading-web-fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.malthemilthers.com/font-loading-strategy-acceptable-flash-of-invisible-text/&quot;&gt;https://www.malthemilthers.com/font-loading-strategy-acceptable-flash-of-invisible-text/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/optimizing-web-fonts-for-performance-the-state-of-the-art/&quot;&gt;https://www.sitepoint.com/optimizing-web-fonts-for-performance-the-state-of-the-art/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Top-level domain change: rendall.dev</title>
		<link href="https://blog.rendall.dev/posts/2019/3/3/top-level-domain-change-rendalldev/"/>
		<updated>2019-03-03T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2019/3/3/top-level-domain-change-rendalldev/</id>
		<content type="html">&lt;p&gt;For years my website and freelance company has been &lt;code&gt;rendall.tv&lt;/code&gt;. Today that changes to &lt;code&gt;rendall.dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I registered a domain name and crafted a website way back in the early 00s, right after undergrad, as many of us do, as a way to promote myself and showcase projects I had been involved with. The design was kitsch from the start. One might have called it &lt;a href=&quot;https://web.archive.org/web/20170811000534/http://rendall.tv/&quot;&gt;&lt;em&gt;ironic urban cowboy&lt;/em&gt;&lt;/a&gt;. The original brown-and-tan color scheme came from a drop-down list in freaking &lt;em&gt;Macromedia &lt;em&gt;Dreamweaver&lt;/em&gt;&lt;/em&gt;! And thus it sat for years, changing only very slightly, as more than a decade passed, even as the world&#39;s taste, and my own, changed. For years I paid $35 USD per month to an aging hosting company, and that more than anything else seems as archaic as dial-up.&lt;/p&gt;
&lt;p&gt;The domain change and design change also corresponds to a personal shift in me that has been ongoing for some few years now. It is difficult to put into words, but it corresponds to a kind of increased seriousness of purpose or narrowing of focus. Software development in years past for me has been a way to make a decent income and have fun while doing it. While this is still true, software development has also become a way of life, both vocation and avocation. I don&#39;t want to predict what this internal shift means for the future (if anything!), or rhapsodize about the &lt;em&gt;passion&lt;/em&gt; (such an overused cliche of a word!) I feel for software development, but on some level it feels like I am waking up. To what, I do not know yet. To possibility, perhaps. There is so much happening, so many possibilities, so much talented activity.&lt;/p&gt;
&lt;p&gt;The current design of this site is not in its final form by any means. It is now minimalist and cold with very little to recommend it, visually speaking. That will change in time. Slowly, but not as slowly as &lt;code&gt;rendall.tv&lt;/code&gt;!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Thoughts on Technical Interviews and Challenges</title>
		<link href="https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/"/>
		<updated>2019-04-23T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/</id>
		<content type="html">&lt;p&gt;A technical interview can be a learning experience for all, or it can be a grim, soul-sucking grind. The first path will lead to an effective team, and the second will lead to a dysfunctional team; this is an exorable, near-mathematical inevitability. Think deeply about how your interview process will lead to the team your company deserves.&lt;/p&gt;
&lt;p&gt;This post talks in general about the second interview in the overwhelmingly popular two-interview format, where the first is a &#39;culture fit&#39; interview of an hour or two, and the second is the technical interview of about the same duration.&lt;/p&gt;
&lt;p&gt;Here I discuss both a general philosophy and a specific, actionable approach to technical interview design, to make interviews effective, enjoyable and ethical.&lt;/p&gt;
&lt;h3 id=&quot;effectiveness&quot;&gt;Effectiveness &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#effectiveness&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Briefly, let&#39;s define an &lt;em&gt;effective&lt;/em&gt; interview process for a particular job as that which will identify the best, or even an adequate, candidate for that job. An interview can do this by drawing as accurate a &amp;quot;map&amp;quot; as reasonably possible of what a candidate can do, technically speaking.&lt;/p&gt;
&lt;p&gt;A secondary goal, but still important, is to leave the candidate with a positive feeling about your company, even if the process does not end in a job offer.&lt;/p&gt;
&lt;h3 id=&quot;the-map-is-not-the-territory&quot;&gt;The Map Is Not The Territory &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#the-map-is-not-the-territory&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a limit to how effective any evaluation can be, in the same way that a map cannot effectively show everything that&#39;s in the land it represents. In a map, all fractal irregularity of coastlines, street cracks, ant-hills and rotten post fences are subsumed in an abstract overview best suited for getting a car from &lt;em&gt;here&lt;/em&gt; to &lt;em&gt;there&lt;/em&gt;. There is nothing in a map about the beauty of a forest pond, the intimidation of a steep incline, the dangerousness of a particular intersection, nor who makes the best mojitos in town.&lt;/p&gt;
&lt;p&gt;In the same way, an interview is not the job, with all of its daily grinds, challenges and triumphs. A job interview rarely covers, for instance, that which interviewers do not know they do not know, the &amp;quot;unknown unknowns&amp;quot;; on the contrary, interviewers almost always confirm their own and their employer&#39;s biases. The interview process format of having a culture fit interview of 2 hours or so, followed by a technical interview, is about as effective at finding a great match as going on a great first date and then deciding to move in together.&lt;/p&gt;
&lt;p&gt;Understanding and accounting for this inherent lack of accuracy or precision must be part of any interview process. That said, there are some things we can do to make the whole situation easier.&lt;/p&gt;
&lt;h3 id=&quot;humility-and-respect&quot;&gt;Humility and Respect &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#humility-and-respect&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A quick note about courtesy and respect: have it. Even, and especially, for those candidates who do not do well during the interview. There are many reasons a candidate might flounder that have nothing to do with their technical abilities. Resist any temptation to revel in your power over your temporary ability to give another person a hard time: this is the moment you shine by being humble and kind. You are representing your company and your own personal morals. Not much more need be said. Either this already makes sense to you, or your life has already gone off the rails.&lt;/p&gt;
&lt;p&gt;It also absolutely needs to be said, if the candidate is talented at what they do, you need to internalize well that they are evaluating your company at the same time. Even if they are nervous and submissive and seem rather desperate, and even if you believe your interview process is infallible, you must jettison the notion that they are a petitioner for your scarce resource. A candidate&#39;s rejection for the position is very rarely viewed as a failure, but it could very well be. Talent is a scarcer resource than your unfilled positions. Stay humble.&lt;/p&gt;
&lt;h3 id=&quot;similarity&quot;&gt;Similarity &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#similarity&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One goal of a well-designed interview process is to compare candidates. Only by having a similar interview format, with candidates having similar experiences, discussion topics and questions, can you even hope to have a basis to compare candidates accurately. If each interview is different and depends wholly on the mood and whims of the interviewers, there is really no basis to compare candidates&#39; technical skill (in contrast to the &lt;em&gt;culture fit&lt;/em&gt; interview, which can be more unique and wide-ranging).&lt;/p&gt;
&lt;h3 id=&quot;agenda&quot;&gt;Agenda &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#agenda&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have an agenda, and have it be reasonably the same for each interview, in keeping with the principle of similarity. Write it down. Have the interview agenda be documented, and decided, around the same time you write the job description. Hand a copy of it to the candidate at the beginning of the interview. Everyone should know what is going to happen. It can even have some of the technical questions and terms you will cover during the interview.&lt;/p&gt;
&lt;p&gt;Here is one template for an agenda:&lt;/p&gt;
&lt;h4 id=&quot;general-introductions&quot;&gt;General introductions &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#general-introductions&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The candidate is offered water, coffee or snacks. The interviewers and candidate introduce themselves, talk about who they are. This is really just to get people chatting. It&#39;s not very important what is said at this point. These are the normal introductions by which strangers transform into acquaintences. Ice-breaking, jokes, stories are great! Then the interviewers present the agenda and go over it with the candidate. The goal here is to relax. Remember, you want the candidate at their best.&lt;/p&gt;
&lt;p&gt;I like to state up front that, while there is time at the end of the interview for candidate&#39;s questions, that this is a conversation, and the candidate is interviewing the company as well. &amp;quot;Please, feel free to ask questions of us at any time, not just at the end.&amp;quot;&lt;/p&gt;
&lt;h4 id=&quot;general-tech-discussion&quot;&gt;General tech discussion &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#general-tech-discussion&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ease the candidate into the topic of tech by asking them to talk about anything at all they find interesting in tech: perhaps a recent controversy, observation, trend, intriguing library or exciting project. Anything, really. As with the introduction, what is said here is not extremely important; the goal here is to ease the candidate&#39;s transition from outside concerns into a tech mindset. The interviewers can ask follow-up questions, but again, the goal is not test the candidate&#39;s knowledge, but to have a relaxed candidate. Nothing the candidate says here will be wrong. Also, bear in mind: having a candidate talk about their past projects is one of the least effective ways to evaluate their skill.&lt;/p&gt;
&lt;p&gt;That said, there are some things the interviewers can start to notice. This is an opportunity for them to talk about what they are passionate about in technology, if anything. Even so, you don&#39;t know this person very well at this point, so you don&#39;t know what &#39;passion&#39; looks like for them, you don&#39;t know what they sound like when they&#39;re passionate. Do they talk in a monotone about everything? Are they excitable people who sound passionate about literally everything? You don&#39;t know, and so, do not place too great an emphasis on this section.&lt;/p&gt;
&lt;h4 id=&quot;resume-%2F-cv-%2F-past-experiences&quot;&gt;Resume / CV / past experiences &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#resume-%2F-cv-%2F-past-experiences&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Here the interview can get a bit more detailed, covering specific questions about duties or projects in the past. Have these written down, and these will necessarily be different for each candidate. While you can start with softball questions like &amp;quot;What is your proudest technical achievement?&amp;quot;, you should begin to turn to specifics. What were the projects you worked on in your last job? Why did you make those technical choices you did in your last project? Did you consider other options? If so, why did you reject them?&lt;/p&gt;
&lt;p&gt;Still friendly, always, but the interview has begun. We are now about 15 or 20 minutes into the interview, and this phase goes for 10 or 20 minutes, depending on their experience.&lt;/p&gt;
&lt;h4 id=&quot;break%3F&quot;&gt;Break? &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#break%3F&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Offer a break of 5 to 10 minutes. It&#39;s about to get intense.&lt;/p&gt;
&lt;h4 id=&quot;technical-questions&quot;&gt;Technical questions &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#technical-questions&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you&#39;re looking for a specific kind of technical expertise, or if the candidate claims expertise, this is where you probe their knowledge. Ask questions with clearly right or wrong answers: &amp;quot;What is the event loop?&amp;quot; &amp;quot;What is a monad?&amp;quot; &amp;quot;What is the difference between a left outer join and an inner join?&amp;quot;&lt;/p&gt;
&lt;p&gt;The temptation that many interviewers seem to have, here, is to assume a stern expresson and fire questions at the candidate in an intentionally unsettling manner, interrupting before they are finished. Resist doing this. The process is unsettling enough, and you are not evaluating a candidate&#39;s ability to withstand a hazing. You want the candidate at their best. Unsettling the candidate reflects badly on the company and is ineffective at finding clear technical thinkers. I have met geniuses who are rattled by a &#39;hello&#39;, but are sweet and dedicated.&lt;/p&gt;
&lt;p&gt;Never tell someone they have done well with a question when they have not.&lt;/p&gt;
&lt;p&gt;This part can take anywhere from 20 minutes to 45 minutes or longer.&lt;/p&gt;
&lt;h4 id=&quot;break!&quot;&gt;Break! &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#break!&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Mandatory break. 5-15 minutes. It&#39;s about to get really intense. Encourage them to have a snack. Keep water in the room.&lt;/p&gt;
&lt;h4 id=&quot;coding-exercise&quot;&gt;Coding exercise &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#coding-exercise&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It is essential to have a coding exercise as a part of a technical interview process. Not doing this is a crap shoot. Or Russian roulette. Coding is where the rubber meets the road. Not evaluating a programmer&#39;s ability to program is an extremely poor decision, no matter their background.&lt;/p&gt;
&lt;p&gt;That said, some interviewers resist giving any kind of coding exercise because they point out, not without merit, that a coding exercise is so unlike the job itself that a coding exercise is no better than a dice roll. I see that point. Still, give the simplest coding exercise you can and then disregard it completely, if you like. It&#39;s closer to the needs of the job than just talking about tech.&lt;/p&gt;
&lt;p&gt;If the coding exercise is during the interview, be very clear and consistent about what is to happen, whatever that is. e.g. &amp;quot;We will present a problem. Outline a solution on the whiteboard. We are less interested in a correct solution than in seeing how you think through problems, so communicate verbally as you solve it.&amp;quot; Or, &amp;quot;Here is a small coding problem. We will leave you alone for an hour as you solve it.&amp;quot;&lt;/p&gt;
&lt;p&gt;The topic of coding exercises is vast, and I won&#39;t do more than touch on it here. Entire articles, books, blogs and video channels are dedicated to the topic, so it does at least deserve its own (necessarily incomplete) section. More about that below.&lt;/p&gt;
&lt;h4 id=&quot;break!-1&quot;&gt;Break! &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#break!-1&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Yes, another 5 minute break. They might need a few minutes to collect themselves.&lt;/p&gt;
&lt;h4 id=&quot;debrief%2C-feedback&quot;&gt;Debrief, feedback &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#debrief%2C-feedback&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Give them the opportunity to talk about the interview process itself. Solicit feedback about how the interview &lt;em&gt;process&lt;/em&gt; itself could have gone better. They also might have some feelings about their performance. This is where you can identify ways to improve and even lend a sympathetic ear. If they have done poorly, do not rush them out the door or be impatient. Answer their questions until the end of your allotted time. Tell them about what next steps will be.&lt;/p&gt;
&lt;p&gt;If you like them, talk about how great it is to work at your company.&lt;/p&gt;
&lt;h4 id=&quot;departure&quot;&gt;Departure &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#departure&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Regardless of your evaluation, shake their hands and &lt;em&gt;look them in the eye&lt;/em&gt;. They honored you with their time. Respect that.&lt;/p&gt;
&lt;h3 id=&quot;coding-exercise-1&quot;&gt;Coding exercise &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#coding-exercise-1&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As said before, some kind of coding exercise is essential. And, likewise, doing poorly on any particular exercise does not mean that they would be bad at the job, or bad at programming: only that they did poorly on an exercise. It is possible that the interview process or the test itself is poorly designed. I view coding exercises as but one channel to understand a candidate; an important channel, but only one.&lt;/p&gt;
&lt;p&gt;There are many different formats for coding exercises: whiteboard exercise, take-home projects, multiple-choice tests, pair-programming, verbal questions about terminology. Here I&#39;ll only write some general principles, and get specific only about &lt;em&gt;take-home projects&lt;/em&gt; for now.&lt;/p&gt;
&lt;h4 id=&quot;generally&quot;&gt;Generally &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#generally&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Coding exercises should be the same for all candidates, in accordance with the Principle of Similarity, in order to accurately compare performance. An ad-hoc exercise, custom-designed for a particular candidate will not lead to an accurate evaluation.&lt;/li&gt;
&lt;li&gt;If the coding exercise has a clear, unambiguous, correct answer, then consider having unit tests. This eliminates biases about coding style, doubts about whether some particular solution can work, and misinterpretation of the result.&lt;/li&gt;
&lt;li&gt;If the coding exercise does not have a clear, unambiguous correct answer, then consider having clear, unambiguous acceptance criteria.&lt;/li&gt;
&lt;li&gt;Overall, leave more time for any exercise than might be usual. Yes, the question might be very easy under normal circumstances, but these are not normal circumstances.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;take-home-projects&quot;&gt;Take-home projects &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#take-home-projects&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A take-home project reveals a lot about your company, so consider it carefully.&lt;/p&gt;
&lt;p&gt;Unless you pay the client, a take-home project or exam must not be intended to take more than an hour or so. It might take the candidate more than an hour, but that&#39;s their business. It must - &lt;em&gt;must&lt;/em&gt; - be designed sincerely to take no more than an hour. Do the project yourself, or have a respected developer do it, and if it takes longer than an hour, scale it back.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;must&lt;/em&gt; have very clear acceptance criteria, preferably actual unit- or end-to-end tests. It must only evaluate the skill-set the candidate will be hired for. No UXD for a front-end engineer, for instance.&lt;/p&gt;
&lt;p&gt;I will explain why in the form of advice to your candidate: If a company sends you a project that takes hours, or does not have clear acceptance criteria, this is a company that is unambiguously and clearly telling you that they will not respect your time and will have unclear, shifting and non-existent acceptance criteria in their day-to-day operations. If you receive a test like this, run. You have been warned.&lt;/p&gt;
&lt;p&gt;Needless to say, if your take-home project has a deadline, ask the candidate when they would like to begin.&lt;/p&gt;
&lt;h3 id=&quot;preparation&quot;&gt;Preparation &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#preparation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Apparently, it needs to be said: be well-prepared and on time. Here is how to do that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go through the candidate&#39;s application and CV, and decide what experience-related questions you will ask.&lt;/li&gt;
&lt;li&gt;Print out any needed materials like agendas, copies of the CV, and coding exercises.&lt;/li&gt;
&lt;li&gt;Make sure that the interview room is booked and has fresh dry-erase markers, erasers, and a pitcher of water.&lt;/li&gt;
&lt;li&gt;Send an email to the candidate about what they can expect. Attach the agenda if possible.
&lt;ul&gt;
&lt;li&gt;If the candidate needs to bring any materials, then tell them.
&lt;ul&gt;
&lt;li&gt;e.g. portfolio, source code, links to previous work&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DO NOT rely on the candidate&#39;s having laptop unless you have specifically requested they bring one.&lt;/li&gt;
&lt;li&gt;Do not request that candidates bring a laptop, anyway. Supply one, if necessary.
&lt;ul&gt;
&lt;li&gt;Perhaps they develop on a desktop. They might have to borrow or buy one. This is no poor reflection on them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the candidate will need a computer or other equipment, make sure that it is set up and working.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;miscellany&quot;&gt;Miscellany &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#miscellany&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Do not mention how many interviews you need to get through.&lt;/li&gt;
&lt;li&gt;Do not hold interviews if you have no intention of filling the job.&lt;/li&gt;
&lt;li&gt;Do not ask candidates to rate their experience with some specific technology. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning-Kruger Effect&lt;/a&gt; guarantees your experienced candidates will underrate themselves and your less experienced candidates will overrate themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;conclusion-%2F-tl%3Bdr&quot;&gt;Conclusion / TL;DR &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/#conclusion-%2F-tl%3Bdr&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Be kind. Be relentless. Be human. The way you treat people in the interview will exactly reflect the team you build. Dysfunction begins and ends with the hiring process. If your company wants highly effective, talented developers, then craft an interview process that reflects a highly effective, talented company.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Using filter, map, reduce and forEach</title>
		<link href="https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/"/>
		<updated>2020-01-22T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/</id>
		<content type="html">&lt;!-- @format --&gt;
&lt;p&gt;I have a simple rule of thumb when choosing to use array methods, and I&#39;d like to share it with you. The array methods I&#39;m discussing here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr.filter(y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.map(y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.reduce(y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.forEach(y)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me, each of these are answers to the question &lt;em&gt;How does an array need to change?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Briefly, the rule of thumb is this: &lt;em&gt;Use &lt;code&gt;filter&lt;/code&gt; if the array length needs to get smaller; use &lt;code&gt;map&lt;/code&gt; if the array length stays the same but the elements of the array need to change in some way; use &lt;code&gt;reduce&lt;/code&gt; if the array length needs to change, especially bigger, &lt;em&gt;or&lt;/em&gt; the array needs to be transformed into some other type, like into an object or a string; and use &lt;code&gt;forEach&lt;/code&gt; only when side-effects are necessary&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I use these methods all the time in my code, roughly in that order of priority.&lt;/p&gt;
&lt;p&gt;If you&#39;re already familiar with these, that&#39;s it. That&#39;s the blog post. You can stop reading. All the rest is just expansion, reiteration. I should have just stopped there, but what kind of blog post would that be? Absurd, that&#39;s what&lt;/p&gt;
&lt;p&gt;Or go ahead and skim the examples.&lt;/p&gt;
&lt;p&gt;If you&#39;re not already familiar with these, this post is probably not the best introduction, but I&#39;ll give it a good go. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;MDN&lt;/a&gt; is a great resource to learn more about them.&lt;/p&gt;
&lt;h2 id=&quot;filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#filter&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Use &lt;code&gt;filter&lt;/code&gt; if the array length needs to get smaller&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; is straight-forward: a &lt;em&gt;filter&lt;/em&gt; removes unwanted stuff, and an &lt;em&gt;array filter&lt;/em&gt; removes unwanted elements from your array. This leads inevitably to the array being the same length or smaller&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; takes a &lt;em&gt;predicate&lt;/em&gt; for its argument, which is a function that answers a &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt; question about that input. If the predicate returns &lt;em&gt;true&lt;/em&gt;, the element is included; if it returns &lt;em&gt;false&lt;/em&gt;, the element is excluded from the output array&lt;/p&gt;
&lt;h3 id=&quot;filter-examples&quot;&gt;filter examples &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#filter-examples&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Consider the array &lt;code&gt;[1, &amp;quot;tooth&amp;quot;, 3, &amp;quot;fort&amp;quot;, &amp;quot;fie!&amp;quot;, 6]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is an array of mixed type, containing elements of type &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;. Let&#39;s apply a &lt;code&gt;filter&lt;/code&gt; to remove &lt;code&gt;string&lt;/code&gt;s from the array, so that it&#39;s an array only of &lt;code&gt;number&lt;/code&gt;s&lt;/p&gt;
&lt;p&gt;Here is a predicate that returns &lt;code&gt;true&lt;/code&gt; if the input is a &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; otherwise: &lt;code&gt;(x) =&amp;gt; typeof x === &amp;quot;number&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Putting them together, with &lt;code&gt;filter&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1, &amp;quot;two&amp;quot;, 3, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, 6].filter((elem) =&amp;gt; typeof elem === &amp;quot;number&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This line takes the array &lt;code&gt;[1, &amp;quot;two&amp;quot;, 3, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, 6]&lt;/code&gt;, applies the &lt;em&gt;filter&lt;/em&gt; &lt;code&gt;(elem) =&amp;gt; typeof elem === &amp;quot;number&amp;quot;&lt;/code&gt; to each element in the array and returns the result, &lt;code&gt;[1,3,6]&lt;/code&gt;, all and only numbers&lt;/p&gt;
&lt;p&gt;Note that the new array is length 3, while the input array is 6. It was a good decision to apply &lt;code&gt;filter&lt;/code&gt; in this case!&lt;/p&gt;
&lt;p&gt;Here&#39;s an example from &lt;a href=&quot;https://github.com/rendall/levenshtein-searcher/blob/601f69c630e4e1df84f30e93eb9ac0e645684b0e/src/index.ts#L26&quot;&gt;working code&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const searchSpace = dict.filter((entry) =&amp;gt; entry.length == wordLength);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;dict&lt;/code&gt; is literally a list of words &lt;em&gt;(e.g. &amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;pear&amp;quot;, ...) only, &lt;em&gt;humongous&lt;/em&gt;&lt;/em&gt; and the predicate, &lt;code&gt;(entry) =&amp;gt; entry.length == wordLength&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt; if the number of characters in &lt;code&gt;entry&lt;/code&gt; is exactly &lt;code&gt;wordLength&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it&#39;s any other length. Applying this predicate to &lt;code&gt;dict&lt;/code&gt; returns an array of words that all have a &lt;code&gt;length&lt;/code&gt; matching &lt;code&gt;wordLength&lt;/code&gt;. The statement assigns all of this to the constant &lt;code&gt;searchSpace&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Marvelous! The new array &lt;code&gt;searchSpace&lt;/code&gt; is smaller than the input array &lt;code&gt;dict&lt;/code&gt;, consisting entirely of words that are only of length &lt;code&gt;wordLength&lt;/code&gt;. Another win for the Rule of Thumb!&lt;/p&gt;
&lt;h2 id=&quot;map&quot;&gt;map &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#map&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Use &lt;code&gt;map&lt;/code&gt; if the array length stays the same but the elements of the array need to change in some way&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; method transforms each element of an array into something else, and returns these new elements in a new array of exactly the same length. It takes as its argument a function that accepts an input value and returns another transformed value based on the input. &lt;code&gt;map&lt;/code&gt; passes each element in turn to this function, and returns an array with that function applied to each value&lt;/p&gt;
&lt;h3 id=&quot;map-examples&quot;&gt;map examples &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#map-examples&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Consider the array &lt;code&gt;[1, &amp;quot;tooth&amp;quot;, 3, &amp;quot;fort&amp;quot;, &amp;quot;fie!&amp;quot;, 6]&lt;/code&gt; and the function &lt;code&gt;(x) =&amp;gt; typeof x === &amp;quot;number&amp;quot;? x : 0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As before, the array is of mixed type, consisting of &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; elements. The function checks if &lt;code&gt;x&lt;/code&gt; is of type &lt;code&gt;number&lt;/code&gt; and returns &lt;code&gt;x&lt;/code&gt; unchanged if it is, or &lt;code&gt;0&lt;/code&gt; if it&#39;s of any other type&lt;/p&gt;
&lt;p&gt;Putting them togther with map:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1, &amp;quot;tooth&amp;quot;, 3, &amp;quot;fort&amp;quot;, &amp;quot;fie!&amp;quot;, 6].map((x) =&amp;gt; typeof x === &amp;quot;number&amp;quot;? x : 0)&lt;/code&gt; which returns &lt;code&gt;[1, 0, 3, 0, 0, 6]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the input array length is 6, and the output array is the same length! I am pleased&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://github.com/rendall/simple-comment/blob/53827633f74332d358284a4a30289e6617116600/src/dist/js/apiClient.ts#L126&quot;&gt;working code&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;objToQuery&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(This is a TypeScript function, but just convert this part &lt;code&gt;(obj: {})&lt;/code&gt; to &lt;code&gt;(obj)&lt;/code&gt; and it&#39;s JavaScript)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;objToQuery&lt;/code&gt; function accepts a simple object (e.g. &lt;code&gt;{page:1,query:&amp;quot;lime&amp;quot;}&lt;/code&gt;) and returns a string (e.g. &lt;code&gt;page=1&amp;amp;query=lime&lt;/code&gt;) representation of the object. This is useful to convert a (simple!) object into a URL query string&lt;/p&gt;
&lt;p&gt;Briefly reviewing &lt;code&gt;Object.entries&lt;/code&gt; (and cribbing from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt;), it takes an &lt;code&gt;object&lt;/code&gt; and returns an array of its &lt;code&gt;[key, value]&lt;/code&gt; pairs. So, using our example object, &lt;code&gt;Object.entries({page:1,query:&amp;quot;lime&amp;quot;})&lt;/code&gt; returns &lt;code&gt;[[&amp;quot;page&amp;quot;,1],[&amp;quot;query&amp;quot;,&amp;quot;lime&amp;quot;]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Applying the line &lt;code&gt;.map(entry =&amp;gt; `${entry[0]}=${entry[1]}`)&lt;/code&gt; to &lt;code&gt;[[&amp;quot;page&amp;quot;,1],[&amp;quot;query&amp;quot;,&amp;quot;lime&amp;quot;]]&lt;/code&gt; returns a simple array &lt;code&gt;[&amp;quot;page=1&amp;quot;, &amp;quot;query=lime&amp;quot;]&lt;/code&gt;. Finally, applying &lt;code&gt;.join(&amp;quot;&amp;amp;&amp;quot;)&lt;/code&gt; returns a string, each element of the array &amp;quot;joined&amp;quot; with &lt;em&gt;&amp;amp;&lt;/em&gt;: &lt;code&gt;&amp;quot;page=1&amp;amp;query=lime&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the input array for &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;[[&amp;quot;page&amp;quot;,1],[&amp;quot;query&amp;quot;,&amp;quot;lime&amp;quot;]]&lt;/code&gt; is of length 2 (2 key-value pairs) and the output array &lt;code&gt;[&amp;quot;page=1&amp;quot;, &amp;quot;query=lime&amp;quot;]&lt;/code&gt; is also length 2 (2 strings). The input and output array stayed the same size, while each element was transformed! This is exactly as we predicted!! Astounding&lt;/p&gt;
&lt;h2 id=&quot;reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#reduce&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Use &lt;code&gt;reduce&lt;/code&gt; if the array length needs to change, especially bigger, &lt;em&gt;or&lt;/em&gt; the array needs to be transformed into some other type, like into an object or a string&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt; is misunderstood and mistrusted, but it&#39;s probably my favorite of the array methods (&lt;a href=&quot;https://www.youtube.com/watch?v=qaGjS7-qWzg&quot;&gt;Here are two devs shamefully making fun of people who use it&lt;/a&gt;, but do use it whenever necessary, and use it confidently and with pride!). I think people are confused by the &lt;code&gt;reduce&lt;/code&gt; name, which implies that the array is going to get smaller. Not so! Remember, the array size is going to &lt;em&gt;change&lt;/em&gt; or become &lt;em&gt;not an array&lt;/em&gt;. Any time you need to expand an array into a bigger array &lt;em&gt;or&lt;/em&gt; convert it into something else, consider using &lt;code&gt;reduce&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;reduce-description&quot;&gt;&lt;code&gt;reduce&lt;/code&gt; description &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#reduce-description&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like the other array methods, &lt;code&gt;reduce&lt;/code&gt; takes a function as an argument. Maybe confusingly, this function is called the &lt;em&gt;reducer&lt;/em&gt;, but the name isn&#39;t important. It&#39;s just a function like any other. &lt;code&gt;reduce&lt;/code&gt;, like the other methods, calls this function once successively for each element of its input array, in order. Unlike the other methods, this &lt;em&gt;reducer&lt;/em&gt; function itself requires 2 arguments instead of 1. Also unlike the other methods, it is the &lt;em&gt;second&lt;/em&gt; argument of this function that receives the element value, not the first&lt;/p&gt;
&lt;p&gt;The reducer&#39;s first argument value is the output of the &lt;em&gt;previous&lt;/em&gt; call to the reducer, or if there is no previous element (because it&#39;s the first one) it&#39;s by default the first element of the array&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt; returns whatever its &lt;em&gt;reducer&lt;/em&gt; returns when called with the last element of its input array&lt;/p&gt;
&lt;p&gt;More info at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;MDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s have a quick example or two:&lt;/p&gt;
&lt;h3 id=&quot;reduce-examples&quot;&gt;&lt;code&gt;reduce&lt;/code&gt; examples &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#reduce-examples&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Consider &lt;code&gt;[1, &amp;quot;two&amp;quot;, 3, &amp;quot;four&amp;quot;]&lt;/code&gt; and the function &lt;code&gt;(prev, elem) =&amp;gt; elem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That function takes two arguments and returns only the second one. Calling that function with &lt;code&gt;(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;)&lt;/code&gt; would just return &lt;code&gt;&amp;quot;b&amp;quot;&lt;/code&gt;. It&#39;s a useless function on its own, but it&#39;s useful as an example. &lt;code&gt;[1, &amp;quot;two&amp;quot;, 3, &amp;quot;four&amp;quot;].reduce((prev, elem) =&amp;gt; elem)&lt;/code&gt; will call that function successively, and the reducer will receive values and return them successively, like so:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// the first element of the array is 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// So, in this iteration, the first argument is&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// by default the first element of the array (1),&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// The second argument is the element itself,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and this reducer returns the second argument, the element itself: value 1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;two&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the first argument is the result of the previous iteration (1),&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// but this reducer ignores it, and just returns the second argument&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the second argument is the value of the element of this iteration (value: &quot;two&quot;),&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and so this iteration returns &quot;two&quot;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// which becomes the first argument value for the next iteration:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the first argument is the result of the previous iteration (&quot;two&quot;),&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the second argument is the value of the element for this iteration (3),&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and so it returns 3&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;four&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;four&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// finally, the first argument is the result of the previous iteration (3),&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the second argument is the value of the element for this iteration (&quot;four&quot;),&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and so it returns &quot;four&quot;, and since &quot;four&quot; is the last element of the array&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// reduce itself returns &quot;four as its final result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;[1, &amp;quot;two&amp;quot;, 3, &amp;quot;four&amp;quot;].reduce((prev, elem) =&amp;gt; elem)&lt;/code&gt; returns &lt;code&gt;&amp;quot;four&amp;quot;&lt;/code&gt;, which is the value of the last call to the reducer, which just returns the last element of the array&lt;/p&gt;
&lt;p&gt;Note that the size of the input array is 4, and the output isn&#39;t an array at all, but a &lt;code&gt;string&lt;/code&gt;!&lt;/p&gt;
&lt;h4 id=&quot;array-into-one-thing&quot;&gt;array into one thing &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#array-into-one-thing&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Consider the array &lt;code&gt;[1, &amp;quot;two&amp;quot;, 3, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, 6]&lt;/code&gt; and the function &lt;code&gt;(str, elem) =&amp;gt; `${str}&amp;amp;${elem}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We&#39;ve seen the array before, an array of mixed types. The function just takes two arguments and joins them using &lt;code&gt;&amp;amp;&lt;/code&gt;. Calling this function with &lt;code&gt;&amp;quot;apple&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;banana&amp;quot;&lt;/code&gt; will return &lt;code&gt;&amp;quot;apple&amp;amp;banana&amp;quot;&lt;/code&gt;. That seems rather limited&lt;/p&gt;
&lt;p&gt;What happens when we add it to &lt;code&gt;reduce&lt;/code&gt;, as in &lt;code&gt;[1, &amp;quot;two&amp;quot;, 3, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, 6].reduce((str, elem) =&amp;gt; `${str}&amp;amp;${elem}`)&lt;/code&gt; is a bit more interesting, because it returns &lt;code&gt;&amp;quot;1&amp;amp;two&amp;amp;3&amp;amp;four&amp;amp;five&amp;amp;6&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! We reinvented &lt;code&gt;.join&lt;/code&gt;. No wonder those devs mocked &lt;code&gt;reduce&lt;/code&gt;!&lt;/p&gt;
&lt;h4 id=&quot;array-changes-size&quot;&gt;array changes size &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#array-changes-size&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Let&#39;s strip duplicated elements out of an array!&lt;/p&gt;
&lt;p&gt;Consider the function &lt;code&gt;(arr,e) =&amp;gt; arr.indexOf(e) &amp;gt;= 0? arr : [...arr, e]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This function takes an array as its first argument, &lt;code&gt;arr&lt;/code&gt;, and any value at all as its second argument &lt;code&gt;e&lt;/code&gt;. It checks &lt;code&gt;arr.indexOf(e)&lt;/code&gt; to see if &lt;code&gt;e&lt;/code&gt; is in &lt;code&gt;arr&lt;/code&gt;. If it is &lt;em&gt;(i.e. &lt;code&gt;arr.indexOf(e) &amp;gt;= 0&lt;/code&gt;)&lt;/em&gt; then the function returns &lt;code&gt;arr&lt;/code&gt; itself. But if the value &lt;code&gt;e&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; in &lt;code&gt;arr&lt;/code&gt; &lt;em&gt;(i.e. &lt;code&gt;arr.indexOf(e) === -1&lt;/code&gt;)&lt;/em&gt; then it returns the array &lt;code&gt;arr&lt;/code&gt; with &lt;code&gt;e&lt;/code&gt; appended as its final value &lt;em&gt;(i.e. &lt;code&gt;[...arr, e]&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, this function would accept, say &lt;code&gt;([1,2], 2)&lt;/code&gt; and return &lt;code&gt;[1,2]&lt;/code&gt;; and would accept &lt;code&gt;([1,2], 3)&lt;/code&gt; and return &lt;code&gt;[1,2,3]&lt;/code&gt;. This function when used as a reducer in &lt;code&gt;reduce&lt;/code&gt; will return another array with all duplicates stripped&lt;/p&gt;
&lt;p&gt;Wait, I forgot to mention one thing before! &lt;code&gt;reduce&lt;/code&gt; can take 2 arguments! The first is mandatory, and that&#39;s the &lt;em&gt;reducer&lt;/em&gt; we&#39;ve been talking about. The second, &lt;em&gt;optional&lt;/em&gt; argument is the first value to be sent to the reducer. If it&#39;s not supplied, it&#39;s by default the first value of the array, as we discussed before. You okay? Let&#39;s take a look:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1,1,1,2,2,3,3,4,4,4,5,6,6].reduce((arr,e) =&amp;gt; arr.indexOf(e) &amp;gt;= 0? arr : [...arr, e], [])&lt;/code&gt; is going to return &lt;code&gt;[1,2,3,4,5,6]&lt;/code&gt;, which is the original array stripped of duplicates&lt;/p&gt;
&lt;p&gt;Let&#39;s step through it&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// is the first iteration.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// its first argument is `[]`, which we gave as the second argument to reduce, above&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// its second argument, 1, is the element value of this iteration&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Reducer checks [] to see if it has `1` in it, and it doesn&#39;t, so reducer returns `[1]`&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ...which now becomes the value of the first argument sent to the second iteration:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// reducer checks `[1]` to see if it contains `1`&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// It does! So reducer returns `[1]`&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the next iteration is identical, because arr[3] is value 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// So skipping ahead to:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// reducer checks `[1]` to see if it contains `2`&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// it does *not*, so reducer returns `[1,2]`&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ... which is the first argument of the next iteration...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and so on, until the last element of the array:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// reducer checks the array to see if 6 is in it, and it is&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// so it returns the array itself, unaltered&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and since `reduce` is at the end of the input array&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// `reduce` returns the first argument value,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the array is the solution!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stick all of that in a named function, and you can strip duplicates out of any array you pass in&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const uniq = (arr) =&amp;gt; arr.reduce((acc,e) =&amp;gt; acc.indexOf(e) &amp;gt;= 0? acc : [...acc, e], [])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token function&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//  =&gt; [1,2,3,4,5,6]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;what-else-can-reduce-do%3F&quot;&gt;What else can &lt;code&gt;reduce&lt;/code&gt; do? &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#what-else-can-reduce-do%3F&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Oh, lots. Maybe you have a succession of functions and you want to pass the result of one into the next one in turn. For instance, if you want to extract the user id and password sent in an auth header, you &lt;em&gt;could&lt;/em&gt; do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUserIdPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAuthHeaderValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; decodedHeader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decodeAuthHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headerValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; parsedHeader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseAuthHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;decodedHeader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; parsedHeader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or &lt;a href=&quot;https://github.com/rendall/simple-comment/blob/c3b9931d701352bcb42dca43fa8bb23af62e4c2b/src/lib/utilities.ts#L221&quot;&gt;you could do&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getUserIdPassword&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;getAuthHeaderValue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; decodeAuthHeader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parseAuthHeader&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    headers&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personal preference. No judgment.&lt;/p&gt;
&lt;p&gt;Maybe you want to create an object out of key-value pairs. You can do:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;toObj&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyValues&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  keyValues&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;toObj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;size,weight,color&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;priority&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; {page: 1, fields: &quot;size,weight,color&quot;, priority: &quot;A&quot;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In all of these cases, we&#39;re essentially converting an array into something else, maybe another different array. If you&#39;re doing that, &lt;code&gt;reduce&lt;/code&gt; might get you there faster.&lt;/p&gt;
&lt;h2 id=&quot;foreach&quot;&gt;&lt;code&gt;forEach&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#foreach&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;use &lt;code&gt;forEach&lt;/code&gt; only when side-effects are necessary&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Briefly, a &lt;em&gt;side effect&lt;/em&gt; is when a function changes a value or has an effect outside of its own scope. So, a quick f&#39;rinstance:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling &lt;code&gt;incr()&lt;/code&gt; causes a &lt;em&gt;side-effect&lt;/em&gt; of incrementing &lt;code&gt;count&lt;/code&gt; by 1&lt;/p&gt;
&lt;p&gt;So, if you need to do something like that, &lt;code&gt;forEach&lt;/code&gt; is your method. The function that &lt;code&gt;forEach&lt;/code&gt; accepts as an argument returns no value. Nothing. It&#39;s of type &lt;code&gt;void&lt;/code&gt;. So:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(elem) =&amp;gt; {}&lt;/code&gt; is pretty much it&lt;/p&gt;
&lt;p&gt;Maybe you want to clear a signup form:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;clearSignupForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or maybe you want to log array contents to your console:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; elem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personally, I use &lt;code&gt;forEach&lt;/code&gt; only when a side effect is the only solution possible. I never do something like:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; keyValObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;size,weight,color&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;priority&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; keyValObj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It becomes difficult to know what&#39;s going on with &lt;code&gt;keyValObj&lt;/code&gt; as the codebase grows. Better to have the direct assignment:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; keyValObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;size,weight,color&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;priority&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;extraneous-addendium&quot;&gt;Extraneous addendium &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2020/1/22/using-filter-map-reduce-and-foreach/#extraneous-addendium&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&#39;t tell you something. All of these array methods take functions as arguments... &lt;em&gt;MDN&lt;/em&gt; calls them &lt;em&gt;callbacks&lt;/em&gt; so let&#39;s do that. All of these array methods take &lt;em&gt;callbacks&lt;/em&gt; as we&#39;ve discussed. The thing I didn&#39;t mention is that these array methods pass more values to the &lt;em&gt;callbacks&lt;/em&gt; than just the current value of the array. They also receive the current &lt;em&gt;index&lt;/em&gt; of the array, and after that, the &lt;em&gt;entire&lt;/em&gt; array. That looks like this:&lt;/p&gt;
&lt;p&gt;Lets pass into &lt;code&gt;[&amp;quot;zero&amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;three&amp;quot;].forEach&lt;/code&gt; this &lt;em&gt;callback&lt;/em&gt;: &lt;code&gt;(elem, index, arr) =&amp;gt; console.log({ elem, index, arr })&lt;/code&gt; and see the output.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; elem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// {elem: &quot;zero&quot;, index: 0, arr: [&quot;zero&quot;, &quot;one&quot;, &quot;three&quot;]}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// {elem: &quot;one&quot;, index: 1, arr: [&quot;zero&quot;, &quot;one&quot;, &quot;three&quot;]}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// {elem: &quot;three&quot;, index: 2, arr: [&quot;zero&quot;, &quot;one&quot;, &quot;three&quot;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we see here, the &lt;code&gt;elem&lt;/code&gt; value is followed by the &lt;code&gt;index&lt;/code&gt; value of the current array, followed by &lt;code&gt;arr&lt;/code&gt; which contains the entire input array&lt;/p&gt;
&lt;p&gt;Same goes for the &lt;em&gt;callbacks&lt;/em&gt; on all the other methods, including &lt;code&gt;reduce&lt;/code&gt;. In case you find it useful&lt;/p&gt;
&lt;p&gt;Also, you can chain these methods together. Here&#39;s &lt;a href=&quot;https://github.com/rendall/simple-comment/blob/57fc97334f8b7e883a6c0112210d5f1014b83198/tests/secrets.test.ts#L34&quot;&gt;an example&lt;/a&gt; of how that&#39;s done:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;exampleEnvEntries &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; exampleEnv&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\n{2}&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// eliminate comments&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// eliminate blank lines&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This takes a string called exampleEnv, splits it into an array which holds one line of text per element, removes blank spaces at the beginning and end of each of those lines, filters out any that start with &lt;code&gt;#&lt;/code&gt; and discards any blank lines&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rendall/simple-comment/blob/57fc97334f8b7e883a6c0112210d5f1014b83198/tests/secrets.test.ts#L48&quot;&gt;Later&lt;/a&gt;, this example file is tested against the user&#39;s file and warns the user if their file is missing something or if they have not changed something they should have changed, using &lt;code&gt;forEach&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;exampleEnvEntries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;varName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; varValue&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;varName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; is defined as an environmental variable&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;varName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeDefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The value of each SECRET or PASSWORD in &#39;example.env&#39; is not the same as in process.env&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;varName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SECRET&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; varName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;PASSWORD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;varName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; is not &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;varValue&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;varName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;varValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>My Finland, My Blog</title>
		<link href="https://blog.rendall.dev/posts/2021/2/5/my-finland-my-blog/"/>
		<updated>2021-02-05T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2021/2/5/my-finland-my-blog/</id>
		<content type="html">&lt;!-- @format --&gt;
&lt;p&gt;I have lived now in Finland for nearly 7-and-a-half years! That&#39;s a long time. Longer than I expected when I arrived here from New York City. It&#39;s probably time to admit to myself that I&#39;m not going anywhere.&lt;/p&gt;
&lt;p&gt;This understanding mandates a shift in mindset in my relationship to this land and its culture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.rendall.dev/img/juhannus.jpg&quot; alt=&quot;&amp;quot;Summer, outdoors, friends chatting&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I know enough to get by. I have &lt;em&gt;suku&lt;/em&gt;, or ancestry, here. I have close friends. I have &lt;em&gt;perhe&lt;/em&gt;, family. I have a career that supports me. I&#39;ve never experienced culture shock. I know the rough outline of Finnish history.&lt;/p&gt;
&lt;p&gt;My Finnish language skill is adequate for getting through basic situations. I have met Anglophone immigrants living here longer than I, some of them for over 3 decades, some Americans, who aggressively speak no Finnish at all. Now &lt;em&gt;that&lt;/em&gt; takes a level of dedication that is impressive in its own way.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.rendall.dev/img/mikkeli.jpg&quot; alt=&quot;&amp;quot;Boy jumping on a trampoline in front of a Finnish farmhouse&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Still, my &lt;em&gt;adequate&lt;/em&gt; knowledge has been a barrier to deeper understanding. I cannot yet hold an extended conversation in Finnish. I couldn&#39;t tell you anything about contemporary Finnish literature. I tend to avoid reading notices written in Finnish. I&#39;m expressing all of this in relation to the Finnish &lt;em&gt;language&lt;/em&gt; but this of course extends to &lt;em&gt;culture&lt;/em&gt; and &lt;em&gt;society&lt;/em&gt;. There are depths that I&#39;m not accessing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.rendall.dev/img/kekkonen.jpg&quot; alt=&quot;&amp;quot;Urho Kekkonen smoking a peace pipe, wearing a feathered headdress&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;My blog itself has languished. A public presence is unsettling to me. I&#39;m not a performer. I do not aspire to be perceived as a thought-leader. I have a sense of humor which gets me in trouble. When programming, I tend to solve the problem at hand, write a few notes and then move on. I like things to be neatly complete. My writing is stilted, using too many big words.&lt;/p&gt;
&lt;p&gt;However, I think I can &lt;em&gt;use&lt;/em&gt; this blog, this resource, to bolster my learning, about Finnish language and culture, or anything, really. If I can write about something, explain it, then I can absorb it.&lt;/p&gt;
&lt;p&gt;To that end, I present a new tag, &lt;a href=&quot;https://blog.rendall.dev/tags/finland&quot;&gt;&lt;em&gt;finland&lt;/em&gt;&lt;/a&gt;, that will be thoughts and writing about this land in which I find myself, of pine-forests, lakes, and quiet, earnest people. I will definitely continue to write about any tech topics that strike my fancy, but not only.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Lazy Sunday Musings</title>
		<link href="https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/"/>
		<updated>2021-02-05T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/</id>
		<content type="html">&lt;p&gt;In which your humble author muses on due diligence, translates a Tweet, learns about the best-selling Finnish band of all time, and mentions a fellow Finnish-language-learner&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.rendall.dev/img/paino.jpg&quot; alt=&quot;A dusky shot of a building with a sign M&amp;amp;P Paino&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;simple-comment&quot;&gt;Simple Comment &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#simple-comment&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve been spending time creating a commenting system called &lt;em&gt;Simple Comment&lt;/em&gt; and I&#39;d like to talk about some of the learnings &lt;a href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#learnings-def&quot;&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, about &lt;em&gt;due diligence&lt;/em&gt;. It&#39;s well known that, whenever starting a new project, it&#39;s essential to survey the field to see what exists and what &lt;em&gt;has existed&lt;/em&gt;: learn if what you intend to build has already been built, learn your potential competitors and collaborators, what mistakes have been made, leverage existing knowledge so that you have a clear idea of what it all entails.&lt;/p&gt;
&lt;p&gt;When I thought about what I wanted in a commenting platform, I wanted it to be useable for static sites such as this one, useable with my current host, Netlify, GDPR compliant and no-track, offer complete trust with respect to user data, light-weight, and, since traffic here is exceedingly low, free-tier or self-hosted. As well, I wanted to open-source and promote the API schema itself as a standard so that other systems could interoperate with it. And, in terms of personal development, I didn&#39;t want it to be a toy project, but something that could actually be used by others, possibly turned into a business.&lt;/p&gt;
&lt;p&gt;My survey found &lt;a href=&quot;https://github.com/rendall/simple-comment/commit/fedbeb91890263c3b783c92402ee97058e518f9b#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R198&quot;&gt;12-13 commenting systems&lt;/a&gt;, including Facebook Comment plugin and Disqus, these last two are not at all what I want, and the rest missed one of the other of my list above. And so, one day, unexpectedly, suddenly, I set aside the project I had been devoting several months to, and was about to imminently launch, and got to work on &lt;em&gt;Simple Comment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Without going into too much detail, on November 6th I began and on January 27th I had an MVP &lt;a href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#mvp-def&quot;&gt;2&lt;/a&gt;. It surprised me how long it took, but I got hung up on at least two areas that I needed to learn about: cross-site requests and authentication.&lt;/p&gt;
&lt;p&gt;The other day because of a Hacker News post, and its excellent comments, I also learned that there are not 12-13 available commenting systems, but &lt;em&gt;34&lt;/em&gt;. Some of them absolutely occupy the same niche as &lt;em&gt;Simple Comment&lt;/em&gt; but are more mature &lt;a href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#mature-def&quot;&gt;3&lt;/a&gt;. There are lots of other devs who had the same idea I did. Some of whom tried to make a viable business and actually closed it down.&lt;/p&gt;
&lt;p&gt;So! Learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Due diligence: I searched online for about 3 hours and I would have thought this would be enough. But instead I confirmed a preconception that my ideas are completely original and no other developer has my concerns. Actually, there are lots of other devs who not only share my concerns, but started awhile ago!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication: It&#39;s a beast. As with the comment system itself, my due diligence was lacking. There are a fair number of open-source solutions that I could have used, and it would have shaved weeks off my time. I&#39;ll go over authentication in some future post.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cross-site: I&#39;m super glad to have learned about cross-site requests and implemented an example. There are lots of undocumented gotchas, particularly privacy-related extentions and using &lt;em&gt;incognito&lt;/em&gt; (or &lt;em&gt;private&lt;/em&gt;) mode, that will interfere with expected behavior. I&#39;ll write a post about &lt;em&gt;cross-site&lt;/em&gt; requests in future&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will continue to work on &lt;em&gt;Simple Comment&lt;/em&gt; and dogfood &lt;a href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#def-dogfood&quot;&gt;4&lt;/a&gt; it. After all, no one is doing &lt;em&gt;exactly&lt;/em&gt; what I&#39;m doing and the &lt;a href=&quot;http://www.fotocommunity.com/info/Helsinki_Bus_Station_Theory&quot;&gt;Helsinki Bus Station Theory&lt;/a&gt; applies: stay on the bus and eventually, with effort, the project will diverge from the others to become uniquely valuable. I&#39;ll just do it with a more full awareness of how exactly I&#39;m using my time.&lt;/p&gt;
&lt;h2 id=&quot;finnish-translation&quot;&gt;Finnish translation &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#finnish-translation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Saw a Tweet today that is about at my ability to read. Challenging, not too challenging. I&#39;m going to do a live translation of it here. Hopefully the Tweet is innocuous and not touching any cultural landmines that I&#39;m currently unaware of, as a foreigner.&lt;/p&gt;
&lt;p&gt;The tweet is &lt;em&gt;&amp;quot;Oon sporassa klo 14.42 menossa koronatestiin. Sporaan nousi lauma keski-ikäisiä päissään laulamaan eppu normaalia. Mikä vaihe pandemiaa tää on&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Oon sporassa klo 14.42 menossa koronatestiin&lt;/em&gt; : &amp;quot;I&#39;m on the tram at 2:42pm going to a corona test&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sporaan nousi lauma keski-ikäisiä päissään laulamaan eppu normaalia&lt;/em&gt;: This one is challenging. My guess is &amp;quot;Onto the tram came a middle-aged (&lt;em&gt;lauma&lt;/em&gt; - busker or singer?) to sing (laulamaan) (&lt;em&gt;eppu normaalia&lt;/em&gt; - epä - &amp;quot;not&amp;quot;? normally) abnormally?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mikä vaihe pandemiaa tää on&lt;/em&gt;: &amp;quot;What a change this pandemia is&amp;quot;&lt;/p&gt;
&lt;p&gt;Now, to see what I can find out about &lt;em&gt;lauma&lt;/em&gt; and &lt;em&gt;eppu&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ok! Fortunately, there is an online definition for &lt;a href=&quot;https://en.wiktionary.org/wiki/lauma#Noun&quot;&gt;&lt;em&gt;lauma&lt;/em&gt;&lt;/a&gt;: &amp;quot;crowd, mob, flock (large uncontrolled group of people)&amp;quot;&lt;/p&gt;
&lt;p&gt;And likewise for &lt;a href=&quot;https://en.wiktionary.org/wiki/eppu#Noun&quot;&gt;&lt;em&gt;eppu&lt;/em&gt;&lt;/a&gt;: first-year schoolchild&lt;/p&gt;
&lt;p&gt;These make me realize that I don&#39;t actually remember or know what &lt;em&gt;päissään&lt;/em&gt; means...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wiktionary.org/wiki/p%C3%A4iss%C3%A4%C3%A4n#Adverb&quot;&gt;&lt;em&gt;Drunk!&lt;/em&gt;&lt;/a&gt; (literally &lt;em&gt;into their heads&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;My updated translation: &amp;quot;Onto the tram came a pack of drunken middle-agers singing like schoolchildren.&amp;quot;&lt;/p&gt;
&lt;p&gt;Given this was a Saturday, this is not such an unexpected occurrance in Finland. That plus the &lt;em&gt;normaalia&lt;/em&gt; makes me think I&#39;m not getting the translation exactly.&lt;/p&gt;
&lt;p&gt;What does Google Translate say it means? &amp;quot;A herd of middle-aged people rose to their heads to sing Eppu normal&amp;quot; [eye-roll emoji]&lt;/p&gt;
&lt;p&gt;I have to make a phone call.&lt;/p&gt;
&lt;p&gt;Well! &lt;em&gt;On ollut kehitystä&lt;/em&gt; There have been developments! Apparently &lt;em&gt;Eppu Normaali&lt;/em&gt; is a band, and the meaning of the sentance is &amp;quot;A pack of middle-agers got on the tram singing Eppu Normaali&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let us listen together: &lt;a href=&quot;https://music.youtube.com/playlist?list=PL9043B1DF2AFBBA4E&quot;&gt;https://music.youtube.com/playlist?list=PL9043B1DF2AFBBA4E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wonder what specific song it was. There is a subsequent tweet and replies, so let&#39;s see if there is more information.&lt;/p&gt;
&lt;p&gt;... No.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Eppu Normaali&lt;/em&gt;: My snap judgement - purely by sound without knowing anything about the lyrics - is that it&#39;s rather innocuous pop music. Let&#39;s see what Wikipedia has to say... &lt;a href=&quot;https://en.wikipedia.org/wiki/Eppu_Normaali&quot;&gt;https://en.wikipedia.org/wiki/Eppu_Normaali&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well. Shit. &lt;em&gt;&amp;quot;The band is the best-selling music artist in Finland, with certified sales of nearly two million records&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When in my last blog post I expressed my gaps in understanding Finnish &lt;em&gt;culture&lt;/em&gt; in terms of gaps in Finnish &lt;em&gt;language skill&lt;/em&gt;, this is a great example of what that means.&lt;/p&gt;
&lt;h2 id=&quot;open-api-3-and-tooling&quot;&gt;Open API 3 and tooling &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#open-api-3-and-tooling&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few months ago I was &lt;a href=&quot;https://news.ycombinator.com/item?id=25088348&quot;&gt;whining on HN&lt;/a&gt; about the lack of tooling around &lt;em&gt;Open API 3&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The best in class right now is Open API 3, which offers a way to describe endpoints, verbs and expected responses with a JSON schema. And even so, working with it feels primitive compared to, for instance, front end focused tools with bundling, type checking, package management and so forth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;With Open API 3 / Swagger, you hand write a YAML or JSON file or fill out a form and have it done for you, but there is no code completion nevermind AST analysis. And now you have a schema, but there is no automatic link between that schema and the backend code, nor error typing, nor validation. The code generation options that are available are clunky and not customizable. If you change the code, you just have to go over the schema by hand again and make adjustments. Unit tests help of course, but you build it yourself&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well! There is a project that apparently serves this very need: &lt;a href=&quot;https://github.com/anttiviljami/openapi-backend&quot;&gt;https://github.com/anttiviljami/openapi-backend&lt;/a&gt; and it has been around for a long time.&lt;/p&gt;
&lt;h2 id=&quot;gen-takagi-%7C-korkealinna&quot;&gt;Gen Takagi | Korkealinna &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#gen-takagi-%7C-korkealinna&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a Finnish-language learner, I have a lot of admiration for foreigners who strive to learn Finnish as adults. I&#39;m not talking about becoming fluent. Actually succeeding and becoming fluent feels to me now like a god-like superpower (hopefully, one day, I will read this and think &amp;quot;becoming fluent wasn&#39;t &lt;em&gt;that&lt;/em&gt; hard&amp;quot;). It isn&#39;t so much that the Finnish language is difficult, although it is, it&#39;s that it&#39;s so easy &lt;em&gt;not&lt;/em&gt; to learn it. Finns rank among the highest in the world in facility with English &lt;a href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#finglish&quot;&gt;5&lt;/a&gt;, and it&#39;s outright rare to meet a Finn who is not fluent in English.&lt;/p&gt;
&lt;p&gt;Gen is a Japanese fellow who conceived a desire to learn Finnish and emigrate to Finland about 3 years ago. He&#39;s proficient and relentless and I find that inspirational and aspirational. This post isn&#39;t a profile about him so much as an acknowledgement of him. His YouTube channel is here: &lt;a href=&quot;https://www.youtube.com/user/GenTakagi&quot;&gt;https://www.youtube.com/user/GenTakagi&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/5/lazy-sunday-musings/#footnotes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1 &lt;a id=&quot;learnings-def&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;Learnings&lt;/em&gt; (learning &lt;em&gt;plural&lt;/em&gt;): I don&#39;t know if &amp;quot;learnings&amp;quot; (learning plural) is an industry-wide, business-wide or Nordic regionalism, but it means &amp;quot;things we have learned&amp;quot; from some endeavor.&lt;/p&gt;
&lt;p&gt;2 &lt;a id=&quot;mvp-def&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;Minimum viable product&lt;/em&gt;: Industry term meaning that your project is minimally useable and, if it&#39;s a business, you can begin to market it.&lt;/p&gt;
&lt;p&gt;3 &lt;a id=&quot;mature-def&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;Mature&lt;/em&gt; in the sense of further developed with more features, and not &lt;em&gt;necessarily&lt;/em&gt; in the sense of &amp;quot;adult&amp;quot;, but I am willing to entertain that criticism as well!&lt;/p&gt;
&lt;p&gt;4 &lt;a id=&quot;dogfood-def&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;dogfood&lt;/em&gt; is shorthand for the phrase-and-metaphor &amp;quot;eat your own dogfood&amp;quot;. It refers to the necessity of a company or developer to use the product that they are developing. After all, if you the developer can&#39;t use your own product, how do you expect anyone else to use it? In my case, I&#39;ll continue to use it for this blog, even if there are more fully featured alternatives.&lt;/p&gt;
&lt;p&gt;5 &lt;a id=&quot;finglish&quot;&gt;&lt;/a&gt;&lt;br /&gt;
Apparently there are people who go around measuring this stuff, and ranking European countries about it. I&#39;m not looking it up right now. But the methodology involves pollsters stopping people in the street and quizzing them on English skill. Anyway, when this happens, Finland and all the Nordic countries rank the highest outside of England.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Twitter &#39;Likes&#39; Hider</title>
		<link href="https://blog.rendall.dev/posts/2021/2/14/twitter-likes-hider/"/>
		<updated>2021-02-14T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2021/2/14/twitter-likes-hider/</id>
		<content type="html">&lt;!-- @format --&gt;
&lt;p&gt;I like Twitter. For the most part. I like that there is immediate access to information, thoughts and musings from around the world, from everyday individuals. I dislike that mobs attack and bully individuals on Twitter, and while I am certain that Twitter as an organization abhors this, I believe that it is an inevitable result of deliberate design decisions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.rendall.dev/img/twitterLikesHiderLogo.png&quot; alt=&quot;Twitter &#39;Likes&#39; Hider logo&quot; /&gt; I like for example that I&#39;m aware of police brutality protests in Lagos and larger Nigeria, the peaceful revolution and attempted violent suppression in Belarus, their sister protests in Russia, the latest in Japanese computer art made with artificial intelligence, on and on.&lt;/p&gt;
&lt;p&gt;But Twitter continues to pull its users into drama (aka &lt;em&gt;engagement&lt;/em&gt;). I carefully curate my feed to people and accounts I find interesting with a wide range of opinions, but Twitter will insert into my feed all kinds of extraneous impertinent appurtanances, for instance a viral tweet that someone I follow &#39;likes&#39;; or a tweet, not by someone I follow, but by someone &lt;em&gt;they&lt;/em&gt; follow. Lately Twitter has been suggesting topics (always in the form of overly dramatic, alarmist tweets).&lt;/p&gt;
&lt;p&gt;It&#39;s a cognitive load for me, to resist inserting my opinion on random concerns that will never in any reasonable timeframe affect me, personally. The final straw for me was a tweet in my feed from someone I did not know, indignant over the origin story written on a food package about a brand I will never use, filled to bursting with &lt;em&gt;other&lt;/em&gt; people&#39;s opinion about whether or not the indignation was warranted. It was a really, in my opinion, a dumb thing to be upset about, but never, ever tell someone who is upset about something that it&#39;s not worth it to be upset about.&lt;/p&gt;
&lt;h2 id=&quot;writing-an-extension%2C-then-ignoring-it&quot;&gt;Writing an Extension, then Ignoring It &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/14/twitter-likes-hider/#writing-an-extension%2C-then-ignoring-it&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So 3.5 years ago I wrote an open-source extension to hide those kinds of tweets on Chrome and called it &lt;a href=&quot;https://chrome.google.com/webstore/detail/twitter-likes-hider/dkcgnebncpfljfaaplmedjnfjifffagj&quot;&gt;&lt;em&gt;Twitter &#39;Likes&#39; Hider&lt;/em&gt;&lt;/a&gt;. Not the most imaginative name, but it describes exactly what it does.&lt;/p&gt;
&lt;p&gt;Then I forgot about it. For some reason, Twitter stopped showing me those kinds of tweets in my feed. The extension was extraneous. In the meantime the extension quietly gathered users over the years and now has nearly 1000 installations despite a &lt;em&gt;3.17&lt;/em&gt; rating. The ratings are bi-modal, mostly either 5 stars (the highest rating) or 1 star (the lowest). Apparently it didn&#39;t work for everyone. I &lt;em&gt;think&lt;/em&gt; that&#39;s where all of the 1 star ratings come from, but &lt;em&gt;big shrug&lt;/em&gt; I can&#39;t be sure, for sure. The few who wrote anything noted only, succinctly, &#39;doesn&#39;t work&#39;, so, well I &lt;em&gt;guess&lt;/em&gt; that&#39;s why.&lt;/p&gt;
&lt;h2 id=&quot;paying-attention-again&quot;&gt;Paying Attention Again &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/14/twitter-likes-hider/#paying-attention-again&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After an update to Twitter&#39;s frontend stack (they seem to have swapped in React and Atomic CSS) the extension stopped working for me, and I started paying attention again. And actually caring for it. I&#39;d like others to be able to use it. Occassionally I&#39;ll get appreciative email from someone, asking me to update it somehow. Sometimes even offers to insert sketchy code, which I would never do.&lt;/p&gt;
&lt;p&gt;I like maintaining it, because I personally find it useful and it&#39;s not too onerous. I think the next big update will be to make a Firefox version, so then I can use it on the mobile site. Android Chrome does not allow extensions and mobile Firefox does. The number of users has risen steadily since the last update, so I think other people appreciate it.&lt;/p&gt;
&lt;p&gt;Testing is a bit tricky. It was &#39;growth hacked&#39;, so to speak, so testing is local, manual and then straight to production. I&#39;d like to fix that, but it would involve creating a fake Twitter page and making sure that it looks the way it should.&lt;/p&gt;
&lt;h2 id=&quot;open-source&quot;&gt;Open source &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/2/14/twitter-likes-hider/#open-source&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The code is open source under an AGPL license, and you can see it here: &lt;a href=&quot;https://chrome.google.com/webstore/detail/twitter-likes-hider/dkcgnebncpfljfaaplmedjnfjifffagj&quot;&gt;https://chrome.google.com/webstore/detail/twitter-likes-hider/dkcgnebncpfljfaaplmedjnfjifffagj&lt;/a&gt; What I &lt;em&gt;really&lt;/em&gt; need help with is with the logo. If you&#39;re a graphics person, please get in touch.&lt;/p&gt;
&lt;p&gt;If you try it out, let me know. I&#39;d absolutely appreciate any feedback!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Process and Flow</title>
		<link href="https://blog.rendall.dev/posts/2021/3/3/process-and-flow/"/>
		<updated>2021-03-03T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2021/3/3/process-and-flow/</id>
		<content type="html">&lt;p&gt;As a Finnish language learner, I find &lt;a href=&quot;https://en.wiktionary.org/&quot;&gt;Wiktionary&lt;/a&gt; to be invaluable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.rendall.dev/img/flow.jpg&quot; alt=&quot;Sunlight on a small, calm lake, a forest on the opposite shore&quot; /&gt; Several years ago (2014-2017) I ran a website that presented Finnish word definitions and inflections scraped from Wiktionary, but in a way that was more convenient for Finnish language learners (well, for me, anyway). I was in a full time Finnish course, and it was useful to me. I was likely also its only user.&lt;/p&gt;
&lt;p&gt;It was built using C# and &lt;a href=&quot;http://asp.net/&quot;&gt;ASP.NET&lt;/a&gt; in a framework called MVC, which I had been using in my professional work. You can &lt;a href=&quot;https://github.com/rendall/suomenkieli-website&quot;&gt;peruse the source code here&lt;/a&gt;, if you&#39;re of a mind to do so. Its lack of documentation is discussed here.&lt;/p&gt;
&lt;p&gt;I liked to code &amp;quot;in the Zone&amp;quot; or &amp;quot;in the Flow&amp;quot; then, and I can see it in the code. The Zone is a state of mind where the external world disappears and you&#39;re just focused on the task at hand to the exclusion of all else. People used to talk about that state of mind a lot, how to achieve it and maintain it (e.g. &amp;quot;Make sure you have a 3 hour block of uninterrupted time&amp;quot;), and it was felt to be essential to get really good work done. I believed it. There is even a brief scene in &lt;em&gt;The Social Network&lt;/em&gt; movie, where Sean Parker (Justin Timberlake) tries to ask a developer what he&#39;s doing and is rudely rebuffed. &amp;quot;He&#39;s in the Zone, don&#39;t bother him&amp;quot; he&#39;s told. Sean Parker then grins approvingly (and I cheered quietly). It seems to have fallen out of favor as a cultural idea these days, but it really had force for a long time, and some developers still swear by it today.&lt;/p&gt;
&lt;p&gt;I think there&#39;s a general recognition that being in the Zone is not necessarily needed to get the best work done. Sitting down and typing is not the most important part of software development - it&#39;s critical, of course, and takes up the bulk of a developer&#39;s time - but the conceptual work of planning and architecting, and the social work of getting consensus, documentation and following an already established process is at least as important. To emphasize the Zone is to emphasize only one component of developing software.&lt;/p&gt;
&lt;p&gt;As well, the state of hyper-intense focus means that as devs, we won&#39;t always ask if what we&#39;re doing at the moment is &lt;em&gt;necessary&lt;/em&gt;. Do I really need to optimize that function &lt;em&gt;now&lt;/em&gt;, or can I leave it for never? Coding in the flow means lots of lines of code are being written, but not always towards focused ends.&lt;/p&gt;
&lt;p&gt;When creating or leading a project, I like to give a lot of thought to the process involved. There&#39;s a theory of art creation that &amp;quot;the process&amp;quot; &lt;em&gt;is&lt;/em&gt; the art, and the artistic works that the artist makes and people look at are just a by-product of that artistic process. I think that model can be useful when thinking about software creation also. The product, the software, is the result of a process. If the process is successful, then the software will be robust and bulletproof. Focus on the process, and the software will follow. Code reviews, automated testing, continuous integration are current practices that are part of the process.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Suomenkieli Website&lt;/em&gt; was created when I still equated development to sitting down and typing. I would just start typing and it would all work out. And indeed, the website worked and did what it was supposed to do.&lt;/p&gt;
&lt;p&gt;But for that site, there is zero documentation, so sorting through and getting it up and running is a bit of a chore. There is some reverse-engineering involved. I also was really enamored with the idea of using a relational database to connect all of the words with their declensions and conjugations. And that took up the bulk of my time in development: scraping those properly, making sure they were entered and annotated properly. I spent many hours in Flow, making sure that the contents of the cells of the HTML table displaying inflections were tagged properly with its column and row headers.&lt;/p&gt;
&lt;p&gt;It turns out that the word itself and its &lt;a href=&quot;https://en.wiktionary.org/wiki/Appendix:Finnish_conjugation&quot;&gt;KOTUS type&lt;/a&gt; can completely determine its inflection. Which is to day, that I did not have to scrape the inflections, but could have derived them using Wiktionary&#39;s own scripts.&lt;/p&gt;
&lt;p&gt;As for the site itself, I may find the time and energy to update it again; if you are interested in something like that, let me know. We could collaborate.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Quest Driven Development</title>
		<link href="https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/"/>
		<updated>2021-03-15T00:00:00Z</updated>
		<id>https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;Quest Driven Development&lt;/em&gt; is an expressive approach to writing game stories and interactive fiction that leaves coding and implementation to software, so writers can focus on narrative and world-building. This approach can highlight inconsistencies or problems as potentially clashing narrative branches are woven together, allowing a writer to correct errors or inconsistencies as they go.&lt;/p&gt;
&lt;p&gt;Currently &lt;em&gt;Quest Driven Development (QDD)&lt;/em&gt; is in the concept phase, but the problem and solution space is generally well understood. This post is a brief overview of its ideas.&lt;/p&gt;
&lt;p&gt;The approach itself and infrastructure tooling is &lt;a href=&quot;https://github.com/rendall/quest-driven-development&quot;&gt;open-source&lt;/a&gt; (nothing hidden, and you can contribute) under the &lt;a href=&quot;https://github.com/rendall/quest-driven-development/blob/master/LICENSE&quot;&gt;standard MIT License&lt;/a&gt; (use it however you want, commercially or not, heck launch a business with it), and uses the &lt;a href=&quot;https://allcontributors.org/docs/en/overview&quot;&gt;all-contributors specification&lt;/a&gt;, which honors every contributor and contribution, both technical and non-technical.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Story-rich games, interactive fiction, branching narratives of all sorts, including even bog-standard fetch quests, all have the same underlying abstract structure. Leveraging principles from theory and practice in other areas of software development can improve the design, writing and programming of branching narratives.&lt;/p&gt;
&lt;p&gt;A branching narrative creator can, using &lt;em&gt;Quest Driven Development&lt;/em&gt;, focus on the over-arching story, narrowing in on story details as needed, all while leaving actual implementation details such as variable values, error checks and if-then conditionals to software infrastructure and tooling.&lt;/p&gt;
&lt;p&gt;When mature, this approach allows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;automatically testing the narrative structure for errors and incompletable states;&lt;/li&gt;
&lt;li&gt;tracking narrative events and their consequences in world-building;&lt;/li&gt;
&lt;li&gt;visualizing the narrative structure as a whole or in part;&lt;/li&gt;
&lt;li&gt;interactively navigating and &amp;quot;getting a feel for&amp;quot; the narrative structure without needing to encode changes into the game platform;&lt;/li&gt;
&lt;li&gt;automatic code generation using the narrative itself as a template, rather than programming the narrative by hand;&lt;/li&gt;
&lt;li&gt;enable porting of game narratives into different platforms;&lt;/li&gt;
&lt;li&gt;data-gathering about the popularity and difficulty of various narrative structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As time goes on and the approach matures even further, it should be possible to procedurally generate coherent, unique branching narrative structures, for nearly infinite narratives.&lt;/p&gt;
&lt;p&gt;Given the similar structures that quests share with well-understood problems in software development, current best practices and solutions to these problems can be leveraged to handle or even solve them.&lt;/p&gt;
&lt;h3 id=&quot;brief-taxonomy-of-interactive-narrative-structures&quot;&gt;Brief Taxonomy of Interactive Narrative Structures &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#brief-taxonomy-of-interactive-narrative-structures&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you&#39;re familiar with interactive and branching narratives, feel free to skip ahead!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Branching Narrative&lt;/em&gt; is a general term for the class of stories in which player actions can decide how a story proceeds. &lt;a href=&quot;https://en.wikipedia.org/wiki/Black_Mirror%3A_Bandersnatch&quot;&gt;Black Mirror: Bandersnatch&lt;/a&gt; is one example of this story as applied to film. &lt;a href=&quot;https://en.wikipedia.org/wiki/Life_Is_Strange&quot;&gt;Life Is Strange&lt;/a&gt; is an example applied to the medium of video games. &lt;a href=&quot;https://en.wikipedia.org/wiki/Dictionary_of_the_Khazars&quot;&gt;Dictionary of the Khazars&lt;/a&gt; is (arguably) an example of branching narrative applied to the traditional book medium.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Interactive&lt;/em&gt; here means that the story somehow reacts to the player. (And &lt;em&gt;player&lt;/em&gt; here means the viewer or reader or player, irrespective of the medium.)&lt;/p&gt;
&lt;h4 id=&quot;linear-narrative&quot;&gt;Linear Narrative &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#linear-narrative&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Stories throughout history have overwhelmingly been &lt;em&gt;linear&lt;/em&gt;, in which the story begins and proceeds inevitably to its conclusion, &lt;em&gt;Once upon a time...&lt;/em&gt; to &lt;em&gt;...happily ever after&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Often &lt;em&gt;linear narrative&lt;/em&gt; is contrasted with &lt;em&gt;interactive narrative&lt;/em&gt;, but sometimes a narrative can be &lt;em&gt;interactive&lt;/em&gt; but nevertheless &lt;em&gt;linear&lt;/em&gt;: there are no branching states irrespective of the player&#39;s actions. While usually considered to be a flaw, it sometimes can be an effective story-telling device. One example is the interactive fiction &lt;a href=&quot;https://en.wikipedia.org/wiki/Photopia&quot;&gt;Photopia&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;quests&quot;&gt;Quests &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#quests&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;quest&lt;/em&gt; is a goal-oriented subset of the general &lt;em&gt;branching narrative&lt;/em&gt;, in which generally a character succeeds at a task and is rewarded or fails and is not. As a minor point, &lt;em&gt;Quest Driven Development&lt;/em&gt; itself can apply to any style of branching narrative, not only quests. &lt;em&gt;Quest Driven Development&lt;/em&gt; is however a snappier name than &lt;em&gt;Branching Narrative Driven Development&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;choose-your-own-adventure&quot;&gt;Choose Your Own Adventure &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#choose-your-own-adventure&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Choose Your Own Adventure (CYOA)&lt;/em&gt; is a subset of &lt;em&gt;branching narrative&lt;/em&gt; in which a player&#39;s input is limited to a specific and explicit set of choices, e.g. &lt;em&gt;&amp;quot;To enter the cave, turn to page 25. To cross the river on the log, turn to page 42&amp;quot;&lt;/em&gt;. The actions that exit the current narrative state are clearly listed as a multiple choice. While &lt;em&gt;Quest Driven Development&lt;/em&gt; can handle this style of narrative, it is not restricted to that.&lt;/p&gt;
&lt;p&gt;As an aside, though, I might argue that &lt;em&gt;nearly all&lt;/em&gt; branching narratives ultimately resolve to this kind of structure. In most game platforms, the player has a wide variety of verbs and actions available all the time, but only a small subset of these actions at the right point will move the &lt;em&gt;narrative&lt;/em&gt; along. These actions that exit state are most often &lt;em&gt;hidden or obscured from the player&lt;/em&gt;, and part of the challenge is to discern clues in the environment that indicate these transitional actions. The above &lt;em&gt;CYOA&lt;/em&gt; example for instance might have in an Interactive Fiction platform only this description: &lt;em&gt;&amp;quot;You are in a forest. To the north is a cave. A river flows nearby, across which lays a log.&amp;quot;&lt;/em&gt; The player is invited to examine elements of the environment to decide what actions will move the narrative ahead.&lt;/p&gt;
&lt;h2 id=&quot;theory&quot;&gt;Theory &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#theory&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Quests and branching narratives in general correspond to some well-understood mathematical constructs in mathematics and computer science. If this does not interest you in the least, feel free to skip down to the &lt;a href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#practice&quot;&gt;Practice&lt;/a&gt; section below.&lt;/p&gt;
&lt;h3 id=&quot;finite-state-machines-and-statecharts&quot;&gt;Finite state machines and Statecharts &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#finite-state-machines-and-statecharts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state machine (FSM)&lt;/a&gt; is an idea from computer science, an abstract machine which has a specific number of &lt;em&gt;states&lt;/em&gt;. A &lt;a href=&quot;https://en.wikipedia.org/wiki/State_(computer_science)#Program_state&quot;&gt;&lt;em&gt;state&lt;/em&gt;&lt;/a&gt; can here entirely describe the player&#39;s position along a narrative arc as the result of any past decisions or actions. Some of the possible decisions at a given state will &lt;em&gt;transition&lt;/em&gt; the narrative arc from the current state to another state. In this way, a quest can be described as a finite state machine (or, rather, this essay applies only to those interactive narratives that fit the structure of a finite state machine). A &lt;em&gt;terminal state&lt;/em&gt; for our purposes is a state that ends, or narratively concludes, the quest.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://statecharts.github.io/&quot;&gt;statechart&lt;/a&gt; modifies the concept of finite state machines to more easily apply to real-world solutions, to allow for hierarchical structures and state machines that coordinate in parallel. This could allow for the FSM that represents the narrative structure to overlay another FSM that represents locations in the game, for example.&lt;/p&gt;
&lt;h3 id=&quot;graph-theory&quot;&gt;Graph theory &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#graph-theory&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A finite state machine, and therefore a quest, can be described as a directed graph, where &lt;em&gt;nodes&lt;/em&gt; of the graph are &lt;em&gt;states&lt;/em&gt;, and &lt;em&gt;edges&lt;/em&gt; of the graph are specific actions or decisions which transition the quest from one state to the next. This is wonderful news, because graphs, finite state machines, and therefore quests, have available an intuitive visualization and a rich knowledge base for reasoning about them.&lt;/p&gt;
&lt;h3 id=&quot;regular-expressions&quot;&gt;Regular expressions &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#regular-expressions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A finite state machine can be entirely described by a regular expression. This is a minor point that may not be useful for &lt;em&gt;writing&lt;/em&gt; quests, but may be useful for &lt;em&gt;testing&lt;/em&gt; quests. What this would mean in practice is that a regular expression engine could be leveraged to test whether any given sequence of actions would lead to an ending (or &lt;em&gt;terminal state&lt;/em&gt;).&lt;/p&gt;
&lt;h2 id=&quot;practice&quot;&gt;Practice &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#practice&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;state&lt;/em&gt; as described above can roughly correspond to a scene in a play or an episode in a long-arc TV series: the scenario the characters find themselves in are due to the result of all previous decisions, and the &lt;em&gt;transition&lt;/em&gt; corresponds to decisions or actions that move characters into new scenarios. A narrative constructed with this structure can leverage the theory outlined above &lt;em&gt;and&lt;/em&gt; the practices outlined below.&lt;/p&gt;
&lt;h3 id=&quot;development-environment&quot;&gt;Development environment &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#development-environment&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As an &lt;em&gt;approach&lt;/em&gt; rather than as a specific software solution, &lt;em&gt;Quest Driven Development&lt;/em&gt; can accommodate all manner of writing styles and preferences.&lt;/p&gt;
&lt;p&gt;In the abstract, a branching narrative writer will need an interface that outputs structured data objects which in turn are consumed by other software (perhaps directly by a game platform, or by a visualizer, or an interpreter). The actual nature of the development should be flexible enough to accommodate any sort of file format, from Word and text files, to spreadsheets, dynamic forms and widgets, to visual programming.&lt;/p&gt;
&lt;p&gt;Practically, the structured data for a single scene of a larger narrative would look something like this:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stella reads the journal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  description&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &quot;After Fisk&#39;s betrayal and the loss of her medallion&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Stella in despair flips randomly through Grandma Pluck&#39;s journal.&lt;br /&gt;  There&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; she discovers how exactly the cult intends to summon the&lt;br /&gt;  End of Times. But what does she do with this knowledge?&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  actions&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;decision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tell-fisk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fisks-second-betrayal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;decision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;do-nothing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;eschaton-arrival&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;decision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;try-stop-cult&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;disturbing-revelations&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  ...&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stella does nothing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  description&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &quot;Succumbing at last to exhaustion and fear&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Stella&lt;br /&gt;  lays under her fluffy down comforter and curls into a ball&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  rocking herself to sleep. The Final Battle is decisive. Entropy&#39;s&lt;br /&gt;  victory has always been inevitable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; and now is its time.&lt;br /&gt;  Unleashed at last&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Fenris&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; the Howling Wolf Always Hungry&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  devours the Sun&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; the Moon&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; the Stars&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Stella&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Fisk&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; the cult&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; the&lt;br /&gt;  Earth&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; and finally&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itself. Nothing remains&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; but deep cold&lt;br /&gt;  and darkness&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; for eternity&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  actions&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Software can consume and use such objects to map out the narrative structure, test it and even transform it into cold, hard code.&lt;/p&gt;
&lt;h3 id=&quot;state-management&quot;&gt;State management &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#state-management&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The consequences of potential decisions can overlap and interfere with each other. In a large game, a narrative can become inconsistent: a decision made by the player may not be reflected in the game state later, and almost never in conversation with a minor character at any point. Worse, certain quests or the game itself may &lt;a href=&quot;https://duckduckgo.com/?q=quest+incompletable&amp;amp;ia=web&quot;&gt;enter into an incompletable state&lt;/a&gt;, infuriating and disappointing players.&lt;/p&gt;
&lt;p&gt;Under the hood, a state is a collection of variables and their values, and a transition is a change to the value of one or more of these variables. Manipulating values directly is to transition unpredictably in an unmapped, unexplored state machine. Keeping track of all of these values so that they behave in an expected and consistent way is called &lt;em&gt;state management&lt;/em&gt;, and there are approaches to do this.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Quest Driven Development&lt;/em&gt;, the writer is encouraged to think of state not as a collection of variable-values, but as a branching-point in an narrative. Transitions are not to be thought of as changes to variables, but as possible actions by the player that advance the story.&lt;/p&gt;
&lt;h3 id=&quot;automated-testing&quot;&gt;Automated testing &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#automated-testing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The internet is replete with plaintive posts from disappointed or infuriated players who cannot complete a quest or an entire game because of a broken quest. &lt;em&gt;Quest Driven Development&lt;/em&gt; allows the narrative structure to be automatically explored and tested, flagging potential errors and inconsistencies. The narrative structure can be developed and tested in parallel and distinct from the underlying game platform.&lt;/p&gt;
&lt;h3 id=&quot;x-driven-development&quot;&gt;X Driven Development &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#x-driven-development&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generally, &lt;em&gt;X&lt;/em&gt; Driven Development (e.g. &lt;em&gt;Test Driven Development&lt;/em&gt;, &lt;em&gt;Behavior Driven Development&lt;/em&gt;, &lt;em&gt;Feature Driven Development&lt;/em&gt;) are approaches to &lt;em&gt;software&lt;/em&gt; development that emphasize the &lt;em&gt;X&lt;/em&gt; part, usually by crafting the development environment so that the &lt;em&gt;X&lt;/em&gt; can be written or developed first. In &lt;em&gt;Test&lt;/em&gt; Driven Development, developers write tests that fail, and then write software so that the test will pass. Similarly, in &lt;em&gt;Behavior&lt;/em&gt; Driven Development, development teams decide what behavior the software should have and write &lt;em&gt;expressive&lt;/em&gt; synopses of this behavior.&lt;/p&gt;
&lt;p&gt;The advantages of this approach is that the application has a series of automated tests that describe what the software should do, and importantly, can identify immediately when later additions to the software introduces bugs.&lt;/p&gt;
&lt;h4 id=&quot;quest-driven-development&quot;&gt;Quest Driven Development &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#quest-driven-development&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Likewise, &lt;em&gt;Quest Driven Development&lt;/em&gt; emphasizes the stories that a game wants to tell. As the game progresses, a series of quest objects are created that can be continually tested against, to ensure that later additions are coherent, potential bugs or narrative consistencies are highlighted, and &lt;a href=&quot;https://duckduckgo.com/?q=game+quest+incompletable&amp;amp;ia=web&quot;&gt;all quests are all completable&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;hence&quot;&gt;Hence &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#hence&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Quest Driven Development&lt;/em&gt; is a only an idea in its initial, conceptual phase. To be able to move beyond that into actually helping the community of story-driven game developers, I propose this list of future steps.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributions: As a greenfield, interdisciplinary concept, the field is wide open for contributions.
&lt;ul&gt;
&lt;li&gt;Ideas for improvement&lt;/li&gt;
&lt;li&gt;User-interface and developer experience&lt;/li&gt;
&lt;li&gt;Helpful theory and resources&lt;/li&gt;
&lt;li&gt;Game developers and writers who would consider using it:
&lt;ul&gt;
&lt;li&gt;What would you need to begin using the QDD approach?
&lt;ul&gt;
&lt;li&gt;Tooling?&lt;/li&gt;
&lt;li&gt;Development environment?&lt;/li&gt;
&lt;li&gt;Tutorial?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Praxis: Culturally, the idea must be wedded and welded to actual development, not merely remain a theoretical idea
&lt;ul&gt;
&lt;li&gt;Pay particularly close attention to how game developers work, and interactive fiction writers write, and what they say&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Culture:
&lt;ul&gt;
&lt;li&gt;Friendly and open, to newbies and non-technical people in particular,&lt;/li&gt;
&lt;li&gt;Honoring of all contributions from all contributors&lt;/li&gt;
&lt;li&gt;As an untested idea, &lt;em&gt;QDD&lt;/em&gt; very well may be an impractical dead end.
&lt;ul&gt;
&lt;li&gt;Advocates but not activists&lt;/li&gt;
&lt;li&gt;Practice detachment from outcome&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have had this on my mind for a long time, and judging by some of the response, others have as well. Let&#39;s cooperate and bring some beauty to the world!&lt;/p&gt;
&lt;h3 id=&quot;roadmap&quot;&gt;Roadmap &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#roadmap&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Blog posts that analyze and visualize in-the-wild branching-narratives&lt;/li&gt;
&lt;li&gt;An &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt; that outputs a structured data file
&lt;ul&gt;
&lt;li&gt;Also accepts a file and populates its interface with the structured data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Requests for comment, discussion and resources&lt;/li&gt;
&lt;li&gt;Small games and quests, with input from active game developers&lt;/li&gt;
&lt;li&gt;Tooling, such as JSON schema, testing frameworks, user interfaces&lt;/li&gt;
&lt;li&gt;Automated code generation
&lt;ul&gt;
&lt;li&gt;Tools that transpile structured data to code&lt;/li&gt;
&lt;li&gt;Unity plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Procedural generation&lt;/li&gt;
&lt;li&gt;This is undoubtedly a years-long project, so expectations of leisurely progress should be set accordingly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If &lt;em&gt;Quest Driven Development&lt;/em&gt; were a movie, this blog post is but a teaser trailer. If something here is unclear and you have a question, or it reminds you of work that you or someone else is doing, has done, wants to do, plans to do, or has ideas about, please do drop me a line and send a link to anyone else who might be interested!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;a href=&quot;https://github.com/rendall/quest-driven-development/issues/new&quot;&gt;new issue&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rendall/quest-driven-development&quot;&gt;github repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Comment below on this blog post&lt;/li&gt;
&lt;li&gt;Create a &lt;a href=&quot;https://github.com/rendall/quest-driven-development/pulls&quot;&gt;pull request&lt;/a&gt; for code or documentation&lt;/li&gt;
&lt;li&gt;Create or edit a page &lt;a href=&quot;https://github.com/rendall/quest-driven-development/wiki&quot;&gt;on the wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Others? Discord or Slack? &lt;a href=&quot;https://github.com/rendall/quest-driven-development/issues/new&quot;&gt;What do you think?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;addenda&quot;&gt;Addenda &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#addenda&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These are questions and concerns that came up from helpful first draft readers or after publishing:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Is this a no-code way for non-coders to create games?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not necessarily, but perhaps. It&#39;s more of an approach that enables creators to focus on narrative flow, getting out of the weeds of thinking in terms of variable values and more in terms of scenes and their transitions, the various ways the player can exit from those scenes. A side-effect of this approach should be more robust and error-free narratives, perhaps more complicated or sophisticated narrative structures, and perhaps an opening of the field to non-coders. But, it is by no means the only approach nor even the best approach for certain kinds of narrative or creative process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;The structured data code example above looks like it would list explicit actions, and the player then picks one. Isn&#39;t that a Choose Your Own Adventure?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In a word, no. Well, not necessarily. The primary focus of the &lt;em&gt;QDD&lt;/em&gt; approach is on the &lt;em&gt;narrative&lt;/em&gt; and not on its presentation. The decisions listed above are only those which will transition the narrative to the next state. While it may be atmospherically important for the action &lt;em&gt;&amp;quot;look into the mirror&amp;quot;&lt;/em&gt; to have a response like &lt;em&gt;&amp;quot;The boils have spread below your hairline. You look so tired, Stella. Maybe it would just be easier to give up?&amp;quot;&lt;/em&gt;, narratively speaking, that action does not drive the narrative itself forward (the next stages appear to be rather dark for poor Stella, judging by the state ids!).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;How then would a writer encode &#39;atmospherics&#39; using the QDD approach?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is new to me, too, so I can&#39;t give a definite answer other than to say I know there is a good answer. One approach is to add something like this to the actions array, above:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;decision&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;look-mirror&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;onTransition&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;You look so tired, Stella. Maybe it would be easier to just give up?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;loop-back&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or maybe the platform itself has generic responses to actions that are not explicitly covered by the narrative-state-machine. Or such responses are set as context variables by specific states. I mention these as possibilities, but hopefully probably definitely alternative solutions will reveal themselves as this idea and tooling matures. Maybe you have a good idea?&lt;/p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.rendall.dev/posts/2021/3/15/quest-driven-development/#resources&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In no particular order, nor even guaranteed relevance:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ptolemy.berkeley.edu/publications/papers/98/InteractionFSM/InteractionFSM.pdf&quot;&gt;Interaction of Finite State Machines and Concurrency Models (pdf)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blogs.ubc.ca/lled4492015/files/2015/07/Interactive-Visualizations-of-Plot-in-Fiction.pdf&quot;&gt;Interactive Visualizations of Plot in Fiction (pdf)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.w3.org/TR/scxml/&quot;&gt;SCXML specification&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://statecharts.github.io/&quot;&gt;Statecharts website&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/0167642387900359?via%3Dihub&quot;&gt;Statecharts: a visual formalism for complex systems&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/davidkpiano/xstate&quot;&gt;xstate (state management and visualization library)&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
